
Phase_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fc8  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000009c  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001765  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007b5  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000856  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000016c  00000000  00000000  000037d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022e  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ab7  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000002  00000eee  00000eee  00000fc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000467c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_11 00000026  00000dda  00000dda  00000eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_21 000000aa  00000a10  00000a10  00000ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Send_4bite 00000032  00000d4e  00000d4e  00000e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Send_4bit_text 00000032  00000d80  00000d80  00000e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Send_text 00000014  00000e64  00000e64  00000f38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initialization 000000b4  0000095c  0000095c  00000a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.print_push 000002e4  00000424  00000424  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.print_start 0000004a  00000c78  00000c78  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.phase_alternation 00000066  00000bba  00000bba  00000c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000388  0000009c  0000009c  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .data.pahse_num 00000002  00800114  00000ef0  00000fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data.ADC_second 00000001  00800118  00000ef2  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data.ADC_pr  00000001  00800119  00000ef3  00000fc7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss.count_ADC_cycle 00000002  00800116  00800116  00000fc8  2**0
                  ALLOC
 27 .bss.U3dey    00000004  00800100  00800100  00000fc8  2**0
                  ALLOC
 28 .bss.U2dey    00000004  00800104  00800104  00000fc8  2**0
                  ALLOC
 29 .bss.U1dey    00000004  00800108  00800108  00000fc8  2**0
                  ALLOC
 30 .bss.Buff     00000004  0080010c  0080010c  00000fc8  2**0
                  ALLOC
 31 .bss.Sum      00000004  00800110  00800110  00000fc8  2**0
                  ALLOC
 32 .text.avrlibc.fplib 0000000a  00000ebc  00000ebc  00000f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc.fplib 000000c2  0000089a  0000089a  0000096e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc.fplib 00000008  00000ed0  00000ed0  00000fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc.fplib 00000004  00000ee6  00000ee6  00000fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc.fplib 000000ce  00000708  00000708  000007dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc.fplib 0000000a  00000ec6  00000ec6  00000f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc.fplib 00000058  00000c20  00000c20  00000cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc.fplib 0000007a  00000b40  00000b40  00000c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc.fplib 00000048  00000cc2  00000cc2  00000d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc.fplib 0000000c  00000eb0  00000eb0  00000f84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc.fplib 00000006  00000ee0  00000ee0  00000fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc.fplib 0000000e  00000e78  00000e78  00000f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc.fplib 0000000e  00000e86  00000e86  00000f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc.fplib 00000022  00000e26  00000e26  00000efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc.fplib 00000044  00000d0a  00000d0a  00000dde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc.fplib 0000000e  00000e94  00000e94  00000f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.avrlibc.fplib 00000008  00000ed8  00000ed8  00000fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.avrlibc.fplib 00000004  00000eea  00000eea  00000fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc.fplib 000000c4  000007d6  000007d6  000008aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.avrlibc.fplib 00000086  00000aba  00000aba  00000b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc.fplib 0000001c  00000e48  00000e48  00000f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.avrlibc.fplib 0000000e  00000ea2  00000ea2  00000f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.libgcc.div 00000026  00000e00  00000e00  00000ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.libgcc.div 00000028  00000db2  00000db2  00000e86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	25 c0       	rjmp	.+74     	; 0x4c <__ctors_end>
   2:	75 c7       	rjmp	.+3818   	; 0xeee <__bad_interrupt>
   4:	74 c7       	rjmp	.+3816   	; 0xeee <__bad_interrupt>
   6:	73 c7       	rjmp	.+3814   	; 0xeee <__bad_interrupt>
   8:	72 c7       	rjmp	.+3812   	; 0xeee <__bad_interrupt>
   a:	71 c7       	rjmp	.+3810   	; 0xeee <__bad_interrupt>
   c:	70 c7       	rjmp	.+3808   	; 0xeee <__bad_interrupt>
   e:	6f c7       	rjmp	.+3806   	; 0xeee <__bad_interrupt>
  10:	6e c7       	rjmp	.+3804   	; 0xeee <__bad_interrupt>
  12:	6d c7       	rjmp	.+3802   	; 0xeee <__bad_interrupt>
  14:	6c c7       	rjmp	.+3800   	; 0xeee <__bad_interrupt>
  16:	e1 c6       	rjmp	.+3522   	; 0xdda <__vector_11>
  18:	6a c7       	rjmp	.+3796   	; 0xeee <__bad_interrupt>
  1a:	69 c7       	rjmp	.+3794   	; 0xeee <__bad_interrupt>
  1c:	68 c7       	rjmp	.+3792   	; 0xeee <__bad_interrupt>
  1e:	67 c7       	rjmp	.+3790   	; 0xeee <__bad_interrupt>
  20:	66 c7       	rjmp	.+3788   	; 0xeee <__bad_interrupt>
  22:	65 c7       	rjmp	.+3786   	; 0xeee <__bad_interrupt>
  24:	64 c7       	rjmp	.+3784   	; 0xeee <__bad_interrupt>
  26:	63 c7       	rjmp	.+3782   	; 0xeee <__bad_interrupt>
  28:	62 c7       	rjmp	.+3780   	; 0xeee <__bad_interrupt>
  2a:	f2 c4       	rjmp	.+2532   	; 0xa10 <__vector_21>
  2c:	60 c7       	rjmp	.+3776   	; 0xeee <__bad_interrupt>
  2e:	5f c7       	rjmp	.+3774   	; 0xeee <__bad_interrupt>
  30:	5e c7       	rjmp	.+3772   	; 0xeee <__bad_interrupt>
  32:	5d c7       	rjmp	.+3770   	; 0xeee <__bad_interrupt>

00000034 <.dinit>:
  34:	01 00       	.word	0x0001	; ????
  36:	01 14       	cp	r0, r1
  38:	80 01       	movw	r16, r0
  3a:	14 01       	movw	r2, r8
  3c:	16 00       	.word	0x0016	; ????
  3e:	0e f0       	brts	.+2      	; 0x42 <__SREG__+0x3>
  40:	01 16       	cp	r0, r17
  42:	01 18       	sub	r0, r1
  44:	80 01       	movw	r16, r0
  46:	18 01       	movw	r2, r16
  48:	1a 00       	.word	0x001a	; ????
  4a:	0e f2       	brts	.-126    	; 0xffffffce <__eeprom_end+0xff7effce>

0000004c <__ctors_end>:
  4c:	11 24       	eor	r1, r1
  4e:	1f be       	out	0x3f, r1	; 63
  50:	cf ef       	ldi	r28, 0xFF	; 255
  52:	d4 e0       	ldi	r29, 0x04	; 4
  54:	de bf       	out	0x3e, r29	; 62
  56:	cd bf       	out	0x3d, r28	; 61

00000058 <__do_copy_data>:
  58:	e4 e3       	ldi	r30, 0x34	; 52
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	17 c0       	rjmp	.+46     	; 0x8e <__do_clear_bss+0x8>
  60:	b5 91       	lpm	r27, Z+
  62:	a5 91       	lpm	r26, Z+
  64:	35 91       	lpm	r19, Z+
  66:	25 91       	lpm	r18, Z+
  68:	05 91       	lpm	r16, Z+
  6a:	07 fd       	sbrc	r16, 7
  6c:	0c c0       	rjmp	.+24     	; 0x86 <__do_clear_bss>
  6e:	95 91       	lpm	r25, Z+
  70:	85 91       	lpm	r24, Z+
  72:	ef 01       	movw	r28, r30
  74:	f9 2f       	mov	r31, r25
  76:	e8 2f       	mov	r30, r24
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a2 17       	cp	r26, r18
  7e:	b3 07       	cpc	r27, r19
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0x20>
  82:	fe 01       	movw	r30, r28
  84:	04 c0       	rjmp	.+8      	; 0x8e <__do_clear_bss+0x8>

00000086 <__do_clear_bss>:
  86:	1d 92       	st	X+, r1
  88:	a2 17       	cp	r26, r18
  8a:	b3 07       	cpc	r27, r19
  8c:	e1 f7       	brne	.-8      	; 0x86 <__do_clear_bss>
  8e:	ec 34       	cpi	r30, 0x4C	; 76
  90:	f4 07       	cpc	r31, r20
  92:	31 f7       	brne	.-52     	; 0x60 <__do_copy_data+0x8>
  94:	03 d0       	rcall	.+6      	; 0x9c <_etext>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_exit>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>

Disassembly of section .text:

00000eee <__bad_interrupt>:
 eee:	88 c8       	rjmp	.-3824   	; 0x0 <__vectors>

Disassembly of section .text.__vector_11:

00000dda <__vector_11>:
int8_t ADC_second = 1;

int16_t pahse_num = 123;


ISR(TIMER1_COMPA_vect){
 dda:	1f 92       	push	r1
 ddc:	0f 92       	push	r0
 dde:	0f b6       	in	r0, 0x3f	; 63
 de0:	0f 92       	push	r0
 de2:	11 24       	eor	r1, r1
 de4:	8f 93       	push	r24
	//ADCSRA = (0<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
	ADC_pr = 4;
 de6:	84 e0       	ldi	r24, 0x04	; 4
 de8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_pr>
	TCNT1 = 0;
 dec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 df0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
}
 df4:	8f 91       	pop	r24
 df6:	0f 90       	pop	r0
 df8:	0f be       	out	0x3f, r0	; 63
 dfa:	0f 90       	pop	r0
 dfc:	1f 90       	pop	r1
 dfe:	18 95       	reti

Disassembly of section .text.__vector_21:

00000a10 <__vector_21>:

ISR(ADC_vect){
 a10:	1f 92       	push	r1
 a12:	0f 92       	push	r0
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	0f 92       	push	r0
 a18:	11 24       	eor	r1, r1
 a1a:	2f 93       	push	r18
 a1c:	3f 93       	push	r19
 a1e:	4f 93       	push	r20
 a20:	5f 93       	push	r21
 a22:	6f 93       	push	r22
 a24:	7f 93       	push	r23
 a26:	8f 93       	push	r24
 a28:	9f 93       	push	r25
 a2a:	af 93       	push	r26
 a2c:	bf 93       	push	r27
 a2e:	ef 93       	push	r30
 a30:	ff 93       	push	r31
	count_ADC_cycle++;
 a32:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count_ADC_cycle>
 a36:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count_ADC_cycle+0x1>
 a3a:	01 96       	adiw	r24, 0x01	; 1
 a3c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <count_ADC_cycle+0x1>
 a40:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <count_ADC_cycle>
	Buff = ADC/204.8;
 a44:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 a48:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	77 d0       	rcall	.+238    	; 0xb40 <__floatunsisf>
 a52:	2d ec       	ldi	r18, 0xCD	; 205
 a54:	3c ec       	ldi	r19, 0xCC	; 204
 a56:	4c e4       	ldi	r20, 0x4C	; 76
 a58:	53 e4       	ldi	r21, 0x43	; 67
 a5a:	45 d2       	rcall	.+1162   	; 0xee6 <__divsf3>
 a5c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Buff>
 a60:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Buff+0x1>
 a64:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Buff+0x2>
 a68:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Buff+0x3>
	Sum += Buff*Buff;
 a6c:	9b 01       	movw	r18, r22
 a6e:	ac 01       	movw	r20, r24
 a70:	3c d2       	rcall	.+1144   	; 0xeea <__mulsf3>
 a72:	9b 01       	movw	r18, r22
 a74:	ac 01       	movw	r20, r24
 a76:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Sum>
 a7a:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <Sum+0x1>
 a7e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sum+0x2>
 a82:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Sum+0x3>
 a86:	1b d2       	rcall	.+1078   	; 0xebe <__addsf3>
 a88:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <Sum>
 a8c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <Sum+0x1>
 a90:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Sum+0x2>
 a94:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Sum+0x3>
}
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	0f 90       	pop	r0
 ab6:	1f 90       	pop	r1
 ab8:	18 95       	reti

Disassembly of section .text.Send_4bite:

00000d4e <Send_4bite>:


void Send_4bite(unsigned char bit_4){				// Функция записи 4х бит в LCD
	PORTD |= (1 << 5);								// E = 1 (начало записи команды)
 d4e:	9b b1       	in	r25, 0x0b	; 11
 d50:	90 62       	ori	r25, 0x20	; 32
 d52:	9b b9       	out	0x0b, r25	; 11
	PORTD |= bit_4|(PIND&0b11000000);				// Передаем значение
 d54:	99 b1       	in	r25, 0x09	; 9
 d56:	2b b1       	in	r18, 0x0b	; 11
 d58:	90 7c       	andi	r25, 0xC0	; 192
 d5a:	89 2b       	or	r24, r25
 d5c:	82 2b       	or	r24, r18
 d5e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d60:	8f e8       	ldi	r24, 0x8F	; 143
 d62:	91 e0       	ldi	r25, 0x01	; 1
 d64:	01 97       	sbiw	r24, 0x01	; 1
 d66:	f1 f7       	brne	.-4      	; 0xd64 <Send_4bite+0x16>
 d68:	00 c0       	rjmp	.+0      	; 0xd6a <Send_4bite+0x1c>
 d6a:	00 00       	nop
	_delay_us(100);									// Задержка что-бы дисплей успел заметить измененное состояние
	PORTD &= ~((1 << 5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0));								// E = 0 (конец записи команды)
 d6c:	8b b1       	in	r24, 0x0b	; 11
 d6e:	80 7c       	andi	r24, 0xC0	; 192
 d70:	8b b9       	out	0x0b, r24	; 11
 d72:	8f e8       	ldi	r24, 0x8F	; 143
 d74:	91 e0       	ldi	r25, 0x01	; 1
 d76:	01 97       	sbiw	r24, 0x01	; 1
 d78:	f1 f7       	brne	.-4      	; 0xd76 <Send_4bite+0x28>
 d7a:	00 c0       	rjmp	.+0      	; 0xd7c <Send_4bite+0x2e>
 d7c:	00 00       	nop
 d7e:	08 95       	ret

Disassembly of section .text.Send_4bit_text:

00000d80 <Send_4bit_text>:
	_delay_us(100);									// Задержка что-бы дисплей успел заметить измененное состояние
	//PORTD = 0x00;									// Установка в 0 для корректной работы (без этого при следующем вызове фунция будет некорректно работать)
}
void Send_4bit_text(unsigned char text){			// Функция вывода текста на экран
	PORTD |= ((1 << 5)|(1<<4));						// E = 1 Rs = 1 (начало записи текста)
 d80:	9b b1       	in	r25, 0x0b	; 11
 d82:	90 63       	ori	r25, 0x30	; 48
 d84:	9b b9       	out	0x0b, r25	; 11
	PORTD |= text|(PIND&0b11000000);				// Передаем текст
 d86:	99 b1       	in	r25, 0x09	; 9
 d88:	2b b1       	in	r18, 0x0b	; 11
 d8a:	90 7c       	andi	r25, 0xC0	; 192
 d8c:	89 2b       	or	r24, r25
 d8e:	82 2b       	or	r24, r18
 d90:	8b b9       	out	0x0b, r24	; 11
 d92:	8f e8       	ldi	r24, 0x8F	; 143
 d94:	91 e0       	ldi	r25, 0x01	; 1
 d96:	01 97       	sbiw	r24, 0x01	; 1
 d98:	f1 f7       	brne	.-4      	; 0xd96 <Send_4bit_text+0x16>
 d9a:	00 c0       	rjmp	.+0      	; 0xd9c <Send_4bit_text+0x1c>
 d9c:	00 00       	nop
	_delay_us(100);									// Задержка что-бы дисплей успел заметить измененное состояние
	PORTD &= ~((1 << 5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0));						// E = 0 Rs = 0 (начало записи текста)
 d9e:	8b b1       	in	r24, 0x0b	; 11
 da0:	80 7c       	andi	r24, 0xC0	; 192
 da2:	8b b9       	out	0x0b, r24	; 11
 da4:	8f e8       	ldi	r24, 0x8F	; 143
 da6:	91 e0       	ldi	r25, 0x01	; 1
 da8:	01 97       	sbiw	r24, 0x01	; 1
 daa:	f1 f7       	brne	.-4      	; 0xda8 <Send_4bit_text+0x28>
 dac:	00 c0       	rjmp	.+0      	; 0xdae <Send_4bit_text+0x2e>
 dae:	00 00       	nop
 db0:	08 95       	ret

Disassembly of section .text.Send_text:

00000e64 <Send_text>:
	_delay_us(100);									// Задержка что-бы дисплей успел заметить измененное состояние
	//PORTD = 0x00;									// Установка в 0 для корректной работы (без этого при следующем вызове фунция будет некорректно работать)
}
void Send_text(unsigned char text){					// Функция отправляет 8 битный код символа, который необходимо вывести на дисплей
 e64:	cf 93       	push	r28
 e66:	c8 2f       	mov	r28, r24
	Send_4bit_text(text>>4);						// Запись старшего полубайта
 e68:	82 95       	swap	r24
 e6a:	8f 70       	andi	r24, 0x0F	; 15
 e6c:	89 df       	rcall	.-238    	; 0xd80 <Send_4bit_text>
	Send_4bit_text(text & 0b00001111);				// Запись младшего полубайта
 e6e:	8c 2f       	mov	r24, r28
 e70:	8f 70       	andi	r24, 0x0F	; 15
 e72:	86 df       	rcall	.-244    	; 0xd80 <Send_4bit_text>
}
 e74:	cf 91       	pop	r28
 e76:	08 95       	ret

Disassembly of section .text.initialization:

0000095c <initialization>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 95c:	2f ef       	ldi	r18, 0xFF	; 255
 95e:	80 e7       	ldi	r24, 0x70	; 112
 960:	92 e0       	ldi	r25, 0x02	; 2
 962:	21 50       	subi	r18, 0x01	; 1
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	90 40       	sbci	r25, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <initialization+0x6>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <initialization+0x10>
 96c:	00 00       	nop
void initialization(){	
	_delay_ms(50);					// Функция инициализации дисплея
	// Установка четырехразрядного режима
	PORTD |= (1 << 1);
 96e:	8b b1       	in	r24, 0x0b	; 11
 970:	82 60       	ori	r24, 0x02	; 2
 972:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << 0);
 974:	8b b1       	in	r24, 0x0b	; 11
 976:	8e 7f       	andi	r24, 0xFE	; 254
 978:	8b b9       	out	0x0b, r24	; 11
 97a:	2f ef       	ldi	r18, 0xFF	; 255
 97c:	80 e7       	ldi	r24, 0x70	; 112
 97e:	92 e0       	ldi	r25, 0x02	; 2
 980:	21 50       	subi	r18, 0x01	; 1
 982:	80 40       	sbci	r24, 0x00	; 0
 984:	90 40       	sbci	r25, 0x00	; 0
 986:	e1 f7       	brne	.-8      	; 0x980 <initialization+0x24>
 988:	00 c0       	rjmp	.+0      	; 0x98a <initialization+0x2e>
 98a:	00 00       	nop
	_delay_ms(50);
	// Активизация четырехразрядного режима
	PORTD |= (1 << 5);
 98c:	8b b1       	in	r24, 0x0b	; 11
 98e:	80 62       	ori	r24, 0x20	; 32
 990:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << 5);
 992:	8b b1       	in	r24, 0x0b	; 11
 994:	8f 7d       	andi	r24, 0xDF	; 223
 996:	8b b9       	out	0x0b, r24	; 11
 998:	2f ef       	ldi	r18, 0xFF	; 255
 99a:	80 e7       	ldi	r24, 0x70	; 112
 99c:	92 e0       	ldi	r25, 0x02	; 2
 99e:	21 50       	subi	r18, 0x01	; 1
 9a0:	80 40       	sbci	r24, 0x00	; 0
 9a2:	90 40       	sbci	r25, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <initialization+0x42>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <initialization+0x4c>
 9a8:	00 00       	nop
	_delay_ms(50);
	
	// Шина 4 бит, LCD - 2 строки
	Send_4bite(0b0010);
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	d0 d1       	rcall	.+928    	; 0xd4e <Send_4bite>
	Send_4bite(0b1000);
 9ae:	88 e0       	ldi	r24, 0x08	; 8
 9b0:	ce d1       	rcall	.+924    	; 0xd4e <Send_4bite>
 9b2:	8f e1       	ldi	r24, 0x1F	; 31
 9b4:	9e e4       	ldi	r25, 0x4E	; 78
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <initialization+0x5a>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <initialization+0x60>
 9bc:	00 00       	nop
	_delay_ms(5);
	// Полное выключение дисплея
	Send_4bite(0b0000);
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	c6 d1       	rcall	.+908    	; 0xd4e <Send_4bite>
	Send_4bite(0b1000);
 9c2:	88 e0       	ldi	r24, 0x08	; 8
 9c4:	c4 d1       	rcall	.+904    	; 0xd4e <Send_4bite>
 9c6:	8f e1       	ldi	r24, 0x1F	; 31
 9c8:	9e e4       	ldi	r25, 0x4E	; 78
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	f1 f7       	brne	.-4      	; 0x9ca <initialization+0x6e>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <initialization+0x74>
 9d0:	00 00       	nop
	_delay_ms(5);
	// Очистка дисплея
	Send_4bite(0b0000);
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	bc d1       	rcall	.+888    	; 0xd4e <Send_4bite>
	Send_4bite(0b0001);
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	ba d1       	rcall	.+884    	; 0xd4e <Send_4bite>
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	20 e7       	ldi	r18, 0x70	; 112
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	20 40       	sbci	r18, 0x00	; 0
 9e4:	80 40       	sbci	r24, 0x00	; 0
 9e6:	e1 f7       	brne	.-8      	; 0x9e0 <initialization+0x84>
 9e8:	00 c0       	rjmp	.+0      	; 0x9ea <initialization+0x8e>
 9ea:	00 00       	nop
	
	_delay_ms(50);
	
	// Включение дисплея, курсор не видим
	Send_4bite(0b0000);
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	af d1       	rcall	.+862    	; 0xd4e <Send_4bite>
	Send_4bite(0b1100);
 9f0:	8c e0       	ldi	r24, 0x0C	; 12
 9f2:	ad d1       	rcall	.+858    	; 0xd4e <Send_4bite>
 9f4:	9f ef       	ldi	r25, 0xFF	; 255
 9f6:	29 ef       	ldi	r18, 0xF9	; 249
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	91 50       	subi	r25, 0x01	; 1
 9fc:	20 40       	sbci	r18, 0x00	; 0
 9fe:	80 40       	sbci	r24, 0x00	; 0
 a00:	e1 f7       	brne	.-8      	; 0x9fa <initialization+0x9e>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <initialization+0xa8>
 a04:	00 00       	nop
	
	_delay_ms(20);
	
	// Сдвиг курсора влево
	Send_4bite(0b1000);
 a06:	88 e0       	ldi	r24, 0x08	; 8
 a08:	a2 d1       	rcall	.+836    	; 0xd4e <Send_4bite>
	Send_4bite(0b0000);
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	a0 d1       	rcall	.+832    	; 0xd4e <Send_4bite>
 a0e:	08 95       	ret

Disassembly of section .text.print_push:

00000424 <print_push>:
	
}
void print_push(int16_t phase1, int16_t phase2, int16_t phase3, int16_t Pfase_n){			// Функция вывода сообщения "Нажата кнопка " и номер кнопки
 424:	3f 92       	push	r3
 426:	4f 92       	push	r4
 428:	5f 92       	push	r5
 42a:	6f 92       	push	r6
 42c:	7f 92       	push	r7
 42e:	8f 92       	push	r8
 430:	9f 92       	push	r9
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	8c 01       	movw	r16, r24
 448:	6b 01       	movw	r12, r22
 44a:	4a 01       	movw	r8, r20
 44c:	59 01       	movw	r10, r18
	Send_4bite(0b0000);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	7e d4       	rcall	.+2300   	; 0xd4e <Send_4bite>
	Send_4bite(0b0001);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	7c d4       	rcall	.+2296   	; 0xd4e <Send_4bite>
 456:	8f e1       	ldi	r24, 0x1F	; 31
 458:	9e e4       	ldi	r25, 0x4E	; 78
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <print_push+0x36>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <print_push+0x3c>
 460:	00 00       	nop
	_delay_ms(5);
	Send_4bite(0b0000);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	74 d4       	rcall	.+2280   	; 0xd4e <Send_4bite>
	Send_4bite(0b0010);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	72 d4       	rcall	.+2276   	; 0xd4e <Send_4bite>
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	9e e4       	ldi	r25, 0x4E	; 78
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <print_push+0x4a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <print_push+0x50>
 474:	00 00       	nop
	_delay_ms(5);	
		
	unsigned char phase_count_1 = (phase1/100)+'0';
 476:	0f 2e       	mov	r0, r31
 478:	f4 e6       	ldi	r31, 0x64	; 100
 47a:	ef 2e       	mov	r14, r31
 47c:	f1 2c       	mov	r15, r1
 47e:	f0 2d       	mov	r31, r0
 480:	c8 01       	movw	r24, r16
 482:	b7 01       	movw	r22, r14
 484:	bd d4       	rcall	.+2426   	; 0xe00 <__divmodhi4>
 486:	0f 2e       	mov	r0, r31
 488:	f0 e3       	ldi	r31, 0x30	; 48
 48a:	3f 2e       	mov	r3, r31
 48c:	f0 2d       	mov	r31, r0
 48e:	36 0e       	add	r3, r22
	unsigned char phase_count_2 = (phase1%100/10)+'0';
 490:	ca e0       	ldi	r28, 0x0A	; 10
 492:	d0 e0       	ldi	r29, 0x00	; 0
 494:	be 01       	movw	r22, r28
 496:	b4 d4       	rcall	.+2408   	; 0xe00 <__divmodhi4>
 498:	0f 2e       	mov	r0, r31
 49a:	f0 e3       	ldi	r31, 0x30	; 48
 49c:	4f 2e       	mov	r4, r31
 49e:	f0 2d       	mov	r31, r0
 4a0:	46 0e       	add	r4, r22
	unsigned char phase_count_3 = (phase1%10)+'0';
 4a2:	c8 01       	movw	r24, r16
 4a4:	be 01       	movw	r22, r28
 4a6:	ac d4       	rcall	.+2392   	; 0xe00 <__divmodhi4>
 4a8:	0f 2e       	mov	r0, r31
 4aa:	f0 e3       	ldi	r31, 0x30	; 48
 4ac:	5f 2e       	mov	r5, r31
 4ae:	f0 2d       	mov	r31, r0
 4b0:	58 0e       	add	r5, r24
	unsigned char f1 = (Pfase_n/100)+'0';
 4b2:	c5 01       	movw	r24, r10
 4b4:	b7 01       	movw	r22, r14
 4b6:	a4 d4       	rcall	.+2376   	; 0xe00 <__divmodhi4>
 4b8:	0f 2e       	mov	r0, r31
 4ba:	f0 e3       	ldi	r31, 0x30	; 48
 4bc:	6f 2e       	mov	r6, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	66 0e       	add	r6, r22
	unsigned char f2 = (Pfase_n%100/10)+'0';
 4c2:	be 01       	movw	r22, r28
 4c4:	9d d4       	rcall	.+2362   	; 0xe00 <__divmodhi4>
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f0 e3       	ldi	r31, 0x30	; 48
 4ca:	7f 2e       	mov	r7, r31
 4cc:	f0 2d       	mov	r31, r0
 4ce:	76 0e       	add	r7, r22
	unsigned char f3 = (Pfase_n%10)+'0';
 4d0:	c5 01       	movw	r24, r10
 4d2:	be 01       	movw	r22, r28
 4d4:	95 d4       	rcall	.+2346   	; 0xe00 <__divmodhi4>
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f0 e3       	ldi	r31, 0x30	; 48
 4da:	bf 2e       	mov	r11, r31
 4dc:	f0 2d       	mov	r31, r0
 4de:	b8 0e       	add	r11, r24
	
	Send_4bite(0b1000);
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	35 d4       	rcall	.+2154   	; 0xd4e <Send_4bite>
	Send_4bite(0b0000);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	33 d4       	rcall	.+2150   	; 0xd4e <Send_4bite>

	//Send_text(0x02);	// печать пустого символа
	Send_text(0b10101010);
 4e8:	8a ea       	ldi	r24, 0xAA	; 170
 4ea:	bc d4       	rcall	.+2424   	; 0xe64 <Send_text>
	Send_text('1');
 4ec:	81 e3       	ldi	r24, 0x31	; 49
 4ee:	ba d4       	rcall	.+2420   	; 0xe64 <Send_text>
	Send_text(':');
 4f0:	8a e3       	ldi	r24, 0x3A	; 58
 4f2:	b8 d4       	rcall	.+2416   	; 0xe64 <Send_text>
	Send_text(phase_count_1);
 4f4:	83 2d       	mov	r24, r3
 4f6:	b6 d4       	rcall	.+2412   	; 0xe64 <Send_text>
	Send_text(phase_count_2);
 4f8:	84 2d       	mov	r24, r4
 4fa:	b4 d4       	rcall	.+2408   	; 0xe64 <Send_text>
	Send_text(phase_count_3);
 4fc:	85 2d       	mov	r24, r5
 4fe:	b2 d4       	rcall	.+2404   	; 0xe64 <Send_text>
	
	phase_count_1 = phase2/100+'0';
 500:	c6 01       	movw	r24, r12
 502:	b7 01       	movw	r22, r14
 504:	7d d4       	rcall	.+2298   	; 0xe00 <__divmodhi4>
 506:	0f 2e       	mov	r0, r31
 508:	f0 e3       	ldi	r31, 0x30	; 48
 50a:	ef 2e       	mov	r14, r31
 50c:	f0 2d       	mov	r31, r0
 50e:	e6 0e       	add	r14, r22
	phase_count_2 = phase2%100/10+'0';
 510:	be 01       	movw	r22, r28
 512:	76 d4       	rcall	.+2284   	; 0xe00 <__divmodhi4>
 514:	0f 2e       	mov	r0, r31
 516:	f0 e3       	ldi	r31, 0x30	; 48
 518:	ff 2e       	mov	r15, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	f6 0e       	add	r15, r22
	phase_count_3 = phase2%10+'0';	
 51e:	c6 01       	movw	r24, r12
 520:	be 01       	movw	r22, r28
 522:	6e d4       	rcall	.+2268   	; 0xe00 <__divmodhi4>
 524:	c0 e3       	ldi	r28, 0x30	; 48
 526:	c8 0f       	add	r28, r24
	
	Send_text(' ');	// печать пустого символа
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	9c d4       	rcall	.+2360   	; 0xe64 <Send_text>
	Send_text(0b10101010);
 52c:	8a ea       	ldi	r24, 0xAA	; 170
 52e:	9a d4       	rcall	.+2356   	; 0xe64 <Send_text>
	Send_text('2');
 530:	82 e3       	ldi	r24, 0x32	; 50
 532:	98 d4       	rcall	.+2352   	; 0xe64 <Send_text>
	Send_text(':');
 534:	8a e3       	ldi	r24, 0x3A	; 58
 536:	96 d4       	rcall	.+2348   	; 0xe64 <Send_text>
	Send_text(phase_count_1);
 538:	8e 2d       	mov	r24, r14
 53a:	94 d4       	rcall	.+2344   	; 0xe64 <Send_text>
	Send_text(phase_count_2);
 53c:	8f 2d       	mov	r24, r15
 53e:	92 d4       	rcall	.+2340   	; 0xe64 <Send_text>
	Send_text(phase_count_3);	
 540:	8c 2f       	mov	r24, r28
 542:	90 d4       	rcall	.+2336   	; 0xe64 <Send_text>
	
	Send_text(' ');
 544:	80 e2       	ldi	r24, 0x20	; 32
 546:	8e d4       	rcall	.+2332   	; 0xe64 <Send_text>
	Send_text(' ');
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	8c d4       	rcall	.+2328   	; 0xe64 <Send_text>
	if ((phase1>180) && (phase1<240) && (phase2>180) && (phase2<240) && (phase3>180) && (phase3<240)){
 54c:	05 5b       	subi	r16, 0xB5	; 181
 54e:	11 09       	sbc	r17, r1
 550:	0b 33       	cpi	r16, 0x3B	; 59
 552:	11 05       	cpc	r17, r1
 554:	98 f4       	brcc	.+38     	; 0x57c <__stack+0x7d>
 556:	95 eb       	ldi	r25, 0xB5	; 181
 558:	c9 16       	cp	r12, r25
 55a:	d1 04       	cpc	r13, r1
 55c:	7c f0       	brlt	.+30     	; 0x57c <__stack+0x7d>
 55e:	80 ef       	ldi	r24, 0xF0	; 240
 560:	c8 16       	cp	r12, r24
 562:	d1 04       	cpc	r13, r1
 564:	5c f4       	brge	.+22     	; 0x57c <__stack+0x7d>
 566:	95 eb       	ldi	r25, 0xB5	; 181
 568:	89 16       	cp	r8, r25
 56a:	91 04       	cpc	r9, r1
 56c:	3c f0       	brlt	.+14     	; 0x57c <__stack+0x7d>
 56e:	80 ef       	ldi	r24, 0xF0	; 240
 570:	88 16       	cp	r8, r24
 572:	91 04       	cpc	r9, r1
 574:	1c f4       	brge	.+6      	; 0x57c <__stack+0x7d>
		Send_text('H');
 576:	88 e4       	ldi	r24, 0x48	; 72
 578:	75 d4       	rcall	.+2282   	; 0xe64 <Send_text>
 57a:	08 c0       	rjmp	.+16     	; 0x58c <__stack+0x8d>
	}
	else{
		if ((phase1>180) && (phase1<240)){
 57c:	0b 33       	cpi	r16, 0x3B	; 59
 57e:	11 05       	cpc	r17, r1
 580:	18 f4       	brcc	.+6      	; 0x588 <__stack+0x89>
			Send_text(0b10100100);
 582:	84 ea       	ldi	r24, 0xA4	; 164
 584:	6f d4       	rcall	.+2270   	; 0xe64 <Send_text>
 586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
		}
		else{
			Send_text('O');
 588:	8f e4       	ldi	r24, 0x4F	; 79
 58a:	6c d4       	rcall	.+2264   	; 0xe64 <Send_text>
		}
	}
	
	
	phase_count_1 = phase3/100+'0';
 58c:	c4 01       	movw	r24, r8
 58e:	64 e6       	ldi	r22, 0x64	; 100
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	36 d4       	rcall	.+2156   	; 0xe00 <__divmodhi4>
 594:	10 e3       	ldi	r17, 0x30	; 48
 596:	16 0f       	add	r17, r22
	phase_count_2 = phase3%100/10+'0';
 598:	2a e0       	ldi	r18, 0x0A	; 10
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	b9 01       	movw	r22, r18
 59e:	30 d4       	rcall	.+2144   	; 0xe00 <__divmodhi4>
 5a0:	d0 e3       	ldi	r29, 0x30	; 48
 5a2:	d6 0f       	add	r29, r22
	phase_count_3 = phase3%10+'0';
 5a4:	c4 01       	movw	r24, r8
 5a6:	b9 01       	movw	r22, r18
 5a8:	2b d4       	rcall	.+2134   	; 0xe00 <__divmodhi4>
 5aa:	c0 e3       	ldi	r28, 0x30	; 48
 5ac:	c8 0f       	add	r28, r24
	
	Send_4bite(0b1100);
 5ae:	8c e0       	ldi	r24, 0x0C	; 12
 5b0:	ce d3       	rcall	.+1948   	; 0xd4e <Send_4bite>
	Send_4bite(0b0000);
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	cc d3       	rcall	.+1944   	; 0xd4e <Send_4bite>
	
	Send_text(0b10101010);
 5b6:	8a ea       	ldi	r24, 0xAA	; 170
 5b8:	55 d4       	rcall	.+2218   	; 0xe64 <Send_text>
	Send_text('3');
 5ba:	83 e3       	ldi	r24, 0x33	; 51
 5bc:	53 d4       	rcall	.+2214   	; 0xe64 <Send_text>
	Send_text(':');
 5be:	8a e3       	ldi	r24, 0x3A	; 58
 5c0:	51 d4       	rcall	.+2210   	; 0xe64 <Send_text>
	Send_text(phase_count_1);
 5c2:	81 2f       	mov	r24, r17
 5c4:	4f d4       	rcall	.+2206   	; 0xe64 <Send_text>
	Send_text(phase_count_2);
 5c6:	8d 2f       	mov	r24, r29
 5c8:	4d d4       	rcall	.+2202   	; 0xe64 <Send_text>
	Send_text(phase_count_3);
 5ca:	8c 2f       	mov	r24, r28
 5cc:	4b d4       	rcall	.+2198   	; 0xe64 <Send_text>
	
	
	Send_text(' ');	// печать пустого символа	
 5ce:	80 e2       	ldi	r24, 0x20	; 32
 5d0:	49 d4       	rcall	.+2194   	; 0xe64 <Send_text>
	Send_text(0b10101000);
 5d2:	88 ea       	ldi	r24, 0xA8	; 168
 5d4:	47 d4       	rcall	.+2190   	; 0xe64 <Send_text>
	//Send_text(':');
	Send_text(f1);
 5d6:	86 2d       	mov	r24, r6
 5d8:	45 d4       	rcall	.+2186   	; 0xe64 <Send_text>
	Send_text(f2);
 5da:	87 2d       	mov	r24, r7
 5dc:	43 d4       	rcall	.+2182   	; 0xe64 <Send_text>
	Send_text(f3);
 5de:	8b 2d       	mov	r24, r11
 5e0:	41 d4       	rcall	.+2178   	; 0xe64 <Send_text>
	
	Send_text(' ');
 5e2:	80 e2       	ldi	r24, 0x20	; 32
 5e4:	3f d4       	rcall	.+2174   	; 0xe64 <Send_text>
	Send_text(0b10100100);
 5e6:	84 ea       	ldi	r24, 0xA4	; 164
 5e8:	3d d4       	rcall	.+2170   	; 0xe64 <Send_text>
	ADMUX = (0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(1<<MUX0)|(1<<MUX1)|(0<<MUX2)|(0<<MUX3);
 5ea:	83 e6       	ldi	r24, 0x63	; 99
 5ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
 5f0:	ea e7       	ldi	r30, 0x7A	; 122
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	80 83       	st	Z, r24
 5fa:	8f e1       	ldi	r24, 0x1F	; 31
 5fc:	9e e4       	ldi	r25, 0x4E	; 78
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <__stack+0xff>
 602:	00 c0       	rjmp	.+0      	; 0x604 <__stack+0x105>
 604:	00 00       	nop
	_delay_ms(5);
	int8_t buff = ADCH;
 606:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
	float proc = buff/51*2;
 60a:	61 ea       	ldi	r22, 0xA1	; 161
 60c:	86 02       	muls	r24, r22
 60e:	61 2d       	mov	r22, r1
 610:	11 24       	eor	r1, r1
 612:	68 0f       	add	r22, r24
 614:	65 95       	asr	r22
 616:	65 95       	asr	r22
 618:	65 95       	asr	r22
 61a:	65 95       	asr	r22
 61c:	65 95       	asr	r22
 61e:	87 fd       	sbrc	r24, 7
 620:	63 95       	inc	r22
 622:	66 0f       	add	r22, r22
 624:	77 0b       	sbc	r23, r23
 626:	07 2e       	mov	r0, r23
 628:	00 0c       	add	r0, r0
 62a:	88 0b       	sbc	r24, r24
 62c:	99 0b       	sbc	r25, r25
 62e:	8a d2       	rcall	.+1300   	; 0xb44 <__floatsisf>
 630:	6b 01       	movw	r12, r22
 632:	7c 01       	movw	r14, r24
	int8_t procent = 0;
	
	if (proc>=4.1){
 634:	23 e3       	ldi	r18, 0x33	; 51
 636:	33 e3       	ldi	r19, 0x33	; 51
 638:	43 e8       	ldi	r20, 0x83	; 131
 63a:	50 e4       	ldi	r21, 0x40	; 64
 63c:	4d d4       	rcall	.+2202   	; 0xed8 <__gesf2>
 63e:	88 23       	and	r24, r24
 640:	7c f5       	brge	.+94     	; 0x6a0 <__stack+0x1a1>
		procent = 99;
	}
	else{
		if (proc>4){
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	40 e8       	ldi	r20, 0x80	; 128
 648:	50 e4       	ldi	r21, 0x40	; 64
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	44 d4       	rcall	.+2184   	; 0xed8 <__gesf2>
 650:	18 16       	cp	r1, r24
 652:	44 f1       	brlt	.+80     	; 0x6a4 <__stack+0x1a5>
			procent = 80;
		}
		else{
			if (proc>3.8){
 654:	23 e3       	ldi	r18, 0x33	; 51
 656:	33 e3       	ldi	r19, 0x33	; 51
 658:	43 e7       	ldi	r20, 0x73	; 115
 65a:	50 e4       	ldi	r21, 0x40	; 64
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	3b d4       	rcall	.+2166   	; 0xed8 <__gesf2>
 662:	18 16       	cp	r1, r24
 664:	0c f1       	brlt	.+66     	; 0x6a8 <__stack+0x1a9>
				procent = 50;
			}
			else{
				if (proc>3.7){
 666:	2d ec       	ldi	r18, 0xCD	; 205
 668:	3c ec       	ldi	r19, 0xCC	; 204
 66a:	4c e6       	ldi	r20, 0x6C	; 108
 66c:	50 e4       	ldi	r21, 0x40	; 64
 66e:	c7 01       	movw	r24, r14
 670:	b6 01       	movw	r22, r12
 672:	32 d4       	rcall	.+2148   	; 0xed8 <__gesf2>
 674:	18 16       	cp	r1, r24
 676:	d4 f0       	brlt	.+52     	; 0x6ac <__stack+0x1ad>
					procent = 30;
				}
				else{
					if (proc>3.6){
 678:	26 e6       	ldi	r18, 0x66	; 102
 67a:	36 e6       	ldi	r19, 0x66	; 102
 67c:	46 e6       	ldi	r20, 0x66	; 102
 67e:	50 e4       	ldi	r21, 0x40	; 64
 680:	c7 01       	movw	r24, r14
 682:	b6 01       	movw	r22, r12
 684:	29 d4       	rcall	.+2130   	; 0xed8 <__gesf2>
 686:	18 16       	cp	r1, r24
 688:	9c f0       	brlt	.+38     	; 0x6b0 <__stack+0x1b1>
						procent = 10;
					}
					else{
						if (proc>3.1){
 68a:	26 e6       	ldi	r18, 0x66	; 102
 68c:	36 e6       	ldi	r19, 0x66	; 102
 68e:	46 e4       	ldi	r20, 0x46	; 70
 690:	50 e4       	ldi	r21, 0x40	; 64
 692:	c7 01       	movw	r24, r14
 694:	b6 01       	movw	r22, r12
 696:	20 d4       	rcall	.+2112   	; 0xed8 <__gesf2>
 698:	18 16       	cp	r1, r24
 69a:	64 f0       	brlt	.+24     	; 0x6b4 <__stack+0x1b5>
	ADMUX = (0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(1<<MUX0)|(1<<MUX1)|(0<<MUX2)|(0<<MUX3);
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
	_delay_ms(5);
	int8_t buff = ADCH;
	float proc = buff/51*2;
	int8_t procent = 0;
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	0b c0       	rjmp	.+22     	; 0x6b6 <__stack+0x1b7>
	
	if (proc>=4.1){
		procent = 99;
 6a0:	d3 e6       	ldi	r29, 0x63	; 99
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <__stack+0x1b7>
	}
	else{
		if (proc>4){
			procent = 80;
 6a4:	d0 e5       	ldi	r29, 0x50	; 80
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__stack+0x1b7>
		}
		else{
			if (proc>3.8){
				procent = 50;
 6a8:	d2 e3       	ldi	r29, 0x32	; 50
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__stack+0x1b7>
			}
			else{
				if (proc>3.7){
					procent = 30;
 6ac:	de e1       	ldi	r29, 0x1E	; 30
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <__stack+0x1b7>
				}
				else{
					if (proc>3.6){
						procent = 10;
 6b0:	da e0       	ldi	r29, 0x0A	; 10
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <__stack+0x1b7>
					}
					else{
						if (proc>3.1){
							procent = 1;
 6b4:	d1 e0       	ldi	r29, 0x01	; 1
					}
				}
			}
		}
	}
	Send_text(((procent/10)+'0'));
 6b6:	c7 e6       	ldi	r28, 0x67	; 103
 6b8:	dc 02       	muls	r29, r28
 6ba:	c1 2d       	mov	r28, r1
 6bc:	11 24       	eor	r1, r1
 6be:	c5 95       	asr	r28
 6c0:	c5 95       	asr	r28
 6c2:	80 e3       	ldi	r24, 0x30	; 48
 6c4:	8c 0f       	add	r24, r28
 6c6:	ce d3       	rcall	.+1948   	; 0xe64 <Send_text>
	Send_text(((procent%10)+'0'));
 6c8:	cc 0f       	add	r28, r28
 6ca:	8c 2f       	mov	r24, r28
 6cc:	88 0f       	add	r24, r24
 6ce:	88 0f       	add	r24, r24
 6d0:	c8 0f       	add	r28, r24
 6d2:	8d 2f       	mov	r24, r29
 6d4:	8c 1b       	sub	r24, r28
 6d6:	80 5d       	subi	r24, 0xD0	; 208
 6d8:	c5 d3       	rcall	.+1930   	; 0xe64 <Send_text>
	Send_text('%');
 6da:	85 e2       	ldi	r24, 0x25	; 37
 6dc:	c3 d3       	rcall	.+1926   	; 0xe64 <Send_text>
	Send_text((procent+'0'));
 6de:	80 e3       	ldi	r24, 0x30	; 48
 6e0:	8d 0f       	add	r24, r29
 6e2:	c0 d3       	rcall	.+1920   	; 0xe64 <Send_text>
	
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	9f 90       	pop	r9
 6fa:	8f 90       	pop	r8
 6fc:	7f 90       	pop	r7
 6fe:	6f 90       	pop	r6
 700:	5f 90       	pop	r5
 702:	4f 90       	pop	r4
 704:	3f 90       	pop	r3
 706:	08 95       	ret

Disassembly of section .text.print_start:

00000c78 <print_start>:
void print_start(){			// Функция вывода сообщения "Нажата кнопка " и номер кнопки
	
	Send_4bite(0b1000);
 c78:	88 e0       	ldi	r24, 0x08	; 8
 c7a:	69 d0       	rcall	.+210    	; 0xd4e <Send_4bite>
	Send_4bite(0b0000);
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	67 d0       	rcall	.+206    	; 0xd4e <Send_4bite>
	
	Send_text(0b11100000);
 c80:	80 ee       	ldi	r24, 0xE0	; 224
 c82:	f0 d0       	rcall	.+480    	; 0xe64 <Send_text>
	Send_text('o');
 c84:	8f e6       	ldi	r24, 0x6F	; 111
 c86:	ee d0       	rcall	.+476    	; 0xe64 <Send_text>
	Send_text(0b10110010);
 c88:	82 eb       	ldi	r24, 0xB2	; 178
 c8a:	ec d0       	rcall	.+472    	; 0xe64 <Send_text>
	Send_text('p');
 c8c:	80 e7       	ldi	r24, 0x70	; 112
 c8e:	ea d0       	rcall	.+468    	; 0xe64 <Send_text>
	Send_text('o');
 c90:	8f e6       	ldi	r24, 0x6F	; 111
 c92:	e8 d0       	rcall	.+464    	; 0xe64 <Send_text>
	
	Send_text(' ');
 c94:	80 e2       	ldi	r24, 0x20	; 32
 c96:	e6 d0       	rcall	.+460    	; 0xe64 <Send_text>
	
	Send_text(0b10111110);
 c98:	8e eb       	ldi	r24, 0xBE	; 190
 c9a:	e4 d0       	rcall	.+456    	; 0xe64 <Send_text>
	Send_text('o');
 c9c:	8f e6       	ldi	r24, 0x6F	; 111
 c9e:	e2 d0       	rcall	.+452    	; 0xe64 <Send_text>
	Send_text(0b10110110);
 ca0:	86 eb       	ldi	r24, 0xB6	; 182
 ca2:	e0 d0       	rcall	.+448    	; 0xe64 <Send_text>
	Send_text('a');
 ca4:	81 e6       	ldi	r24, 0x61	; 97
 ca6:	de d0       	rcall	.+444    	; 0xe64 <Send_text>
	Send_text(0b10111011);
 ca8:	8b eb       	ldi	r24, 0xBB	; 187
 caa:	dc d0       	rcall	.+440    	; 0xe64 <Send_text>
	Send_text('o');
 cac:	8f e6       	ldi	r24, 0x6F	; 111
 cae:	da d0       	rcall	.+436    	; 0xe64 <Send_text>
	Send_text(0b10110011);
 cb0:	83 eb       	ldi	r24, 0xB3	; 179
 cb2:	d8 d0       	rcall	.+432    	; 0xe64 <Send_text>
	Send_text('a');
 cb4:	81 e6       	ldi	r24, 0x61	; 97
 cb6:	d6 d0       	rcall	.+428    	; 0xe64 <Send_text>
	Send_text(0b10111111);
 cb8:	8f eb       	ldi	r24, 0xBF	; 191
 cba:	d4 d0       	rcall	.+424    	; 0xe64 <Send_text>
	Send_text(0b11000100);	
 cbc:	84 ec       	ldi	r24, 0xC4	; 196
 cbe:	d2 d0       	rcall	.+420    	; 0xe64 <Send_text>
 cc0:	08 95       	ret

Disassembly of section .text.phase_alternation:

00000bba <phase_alternation>:
}
void phase_alternation(){
	while (ADC > 20){
 bba:	0c c0       	rjmp	.+24     	; 0xbd4 <phase_alternation+0x1a>
		ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);
 bbc:	80 e4       	ldi	r24, 0x40	; 64
 bbe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
		ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
 bc2:	ea e7       	ldi	r30, 0x7A	; 122
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	80 81       	ld	r24, Z
 bc8:	80 ec       	ldi	r24, 0xC0	; 192
 bca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bcc:	85 e3       	ldi	r24, 0x35	; 53
 bce:	8a 95       	dec	r24
 bd0:	f1 f7       	brne	.-4      	; 0xbce <phase_alternation+0x14>
 bd2:	00 00       	nop
	Send_text('a');
	Send_text(0b10111111);
	Send_text(0b11000100);	
}
void phase_alternation(){
	while (ADC > 20){
 bd4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 bd8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 bdc:	45 97       	sbiw	r24, 0x15	; 21
 bde:	70 f7       	brcc	.-36     	; 0xbbc <phase_alternation+0x2>
		ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);
		ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
		_delay_us(10);
	}
	
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(1<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);
 be0:	81 e4       	ldi	r24, 0x41	; 65
 be2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(0<<ADIF)|(0<<ADIE);
 be6:	ea e7       	ldi	r30, 0x7A	; 122
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	80 81       	ld	r24, Z
 bec:	80 ec       	ldi	r24, 0xC0	; 192
 bee:	80 83       	st	Z, r24
 bf0:	85 e3       	ldi	r24, 0x35	; 53
 bf2:	8a 95       	dec	r24
 bf4:	f1 f7       	brne	.-4      	; 0xbf2 <phase_alternation+0x38>
 bf6:	00 00       	nop
	_delay_us(10);
	int16_t phase2 = ADC;
 bf8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 bfc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>

	pahse_num = 100;
	
	if (phase2>30){
 c00:	4f 97       	sbiw	r24, 0x1f	; 31
 c02:	3c f0       	brlt	.+14     	; 0xc12 <phase_alternation+0x58>
		pahse_num += 23;
 c04:	8b e7       	ldi	r24, 0x7B	; 123
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pahse_num+0x1>
 c0c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pahse_num>
 c10:	08 95       	ret
	}
	else{
		pahse_num += 32;
 c12:	84 e8       	ldi	r24, 0x84	; 132
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pahse_num+0x1>
 c1a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pahse_num>
 c1e:	08 95       	ret

Disassembly of section .text.main:

0000009c <main>:
}


int main(void)
{
	Send_4bite(0b0000);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	57 d6       	rcall	.+3246   	; 0xd4e <Send_4bite>
	Send_4bite(0b0001);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	55 d6       	rcall	.+3242   	; 0xd4e <Send_4bite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e1       	ldi	r24, 0x1F	; 31
  a6:	9e e4       	ldi	r25, 0x4E	; 78
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0xc>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x12>
  ae:	00 00       	nop
	_delay_ms(5);
	Send_4bite(0b0000);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	4d d6       	rcall	.+3226   	; 0xd4e <Send_4bite>
	Send_4bite(0b0010);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	4b d6       	rcall	.+3222   	; 0xd4e <Send_4bite>
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x20>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x26>
  c2:	00 00       	nop
	_delay_ms(10);
	//DDRB = 0xFF;
	DDRB = 0x00;
  c4:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
  c6:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
  c8:	1a b8       	out	0x0a, r1	; 10
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	23 ed       	ldi	r18, 0xD3	; 211
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	91 50       	subi	r25, 0x01	; 1
  d2:	20 40       	sbci	r18, 0x00	; 0
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x34>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3e>
  da:	00 00       	nop
	_delay_ms(1000);
	DDRC = 0x00;
  dc:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x06;
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;	// на передачу PD0-PD7
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	// Порт D в 0
  e6:	1b b8       	out	0x0b, r1	; 11
	//DDRB = 0xFF;
	PORTD |= (1<<6);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<7);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	23 ed       	ldi	r18, 0xD3	; 211
  f8:	80 e3       	ldi	r24, 0x30	; 48
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x5e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x68>
 104:	00 00       	nop
	_delay_ms(1000);
		
	initialization();
 106:	2a d4       	rcall	.+2132   	; 0x95c <initialization>
	print_start();
 108:	b7 d5       	rcall	.+2926   	; 0xc78 <print_start>
	TCCR1B = (0 << CS11)|(0 << CS10)|(1 << CS12); //Делитель на 64 и прерывание по совпадению в регистре OCR1A
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
	OCR1A = F_CPU/256;
 110:	84 e2       	ldi	r24, 0x24	; 36
 112:	94 ef       	ldi	r25, 0xF4	; 244
 114:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 118:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	TIMSK1 = (1<<OCIE0A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fe06f>
	TCNT1 = 0;
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	PORTD &= ~(1<<6);
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<7);	
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8f 77       	andi	r24, 0x7F	; 127
 134:	8b b9       	out	0x0b, r24	; 11
	ADC_pr = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_pr>
	ADC_second = 0;
 13c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADC_second>
	
	sei();
 140:	78 94       	sei
	//int16_t a = 0;
    while(1)
    {

		if (ADC_pr == 1){
 142:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_pr>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	41 f4       	brne	.+16     	; 0x15a <main+0xbe>
			ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
			ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(1<<ADIF)|(1<<ADIE);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 ed       	ldi	r24, 0xD8	; 216
 158:	80 83       	st	Z, r24
		}
		if (ADC_pr == 2){
 15a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_pr>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	41 f4       	brne	.+16     	; 0x172 <main+0xd6>
			ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(1<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
			ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(1<<ADIF)|(1<<ADIE);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 ed       	ldi	r24, 0xD8	; 216
 170:	80 83       	st	Z, r24
		}
		if (ADC_pr == 3){
 172:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_pr>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	41 f4       	brne	.+16     	; 0x18a <main+0xee>
			ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX0)|(1<<MUX1)|(0<<MUX2)|(0<<MUX3);
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
			ADCSRA = (1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADCSRA)|(1<<ADIF)|(1<<ADIE);
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	88 ed       	ldi	r24, 0xD8	; 216
 188:	80 83       	st	Z, r24
		}
		if (ADC_pr == 4)
 18a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_pr>
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	c1 f6       	brne	.-80     	; 0x142 <main+0xa6>
		{
			cli();
 192:	f8 94       	cli
			
			if (ADC_second == 0){
 194:	c0 91 18 01 	lds	r28, 0x0118	; 0x800118 <ADC_second>
 198:	c1 11       	cpse	r28, r1
 19a:	31 c0       	rjmp	.+98     	; 0x1fe <main+0x162>
				U1dey = (sqrt(Sum*1/count_ADC_cycle)*2*2700/22*1.0917);
 19c:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <count_ADC_cycle>
 1a0:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <count_ADC_cycle+0x1>
 1a4:	0d 2c       	mov	r0, r13
 1a6:	00 0c       	add	r0, r0
 1a8:	ee 08       	sbc	r14, r14
 1aa:	ff 08       	sbc	r15, r15
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	c9 d4       	rcall	.+2450   	; 0xb44 <__floatsisf>
 1b2:	9b 01       	movw	r18, r22
 1b4:	ac 01       	movw	r20, r24
 1b6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Sum>
 1ba:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <Sum+0x1>
 1be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sum+0x2>
 1c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Sum+0x3>
 1c6:	8f d6       	rcall	.+3358   	; 0xee6 <__divsf3>
 1c8:	78 d4       	rcall	.+2288   	; 0xaba <sqrt>
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	77 d6       	rcall	.+3310   	; 0xebe <__addsf3>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 ec       	ldi	r19, 0xC0	; 192
 1d4:	48 e2       	ldi	r20, 0x28	; 40
 1d6:	55 e4       	ldi	r21, 0x45	; 69
 1d8:	88 d6       	rcall	.+3344   	; 0xeea <__mulsf3>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 eb       	ldi	r20, 0xB0	; 176
 1e0:	51 e4       	ldi	r21, 0x41	; 65
 1e2:	81 d6       	rcall	.+3330   	; 0xee6 <__divsf3>
 1e4:	23 ed       	ldi	r18, 0xD3	; 211
 1e6:	3c eb       	ldi	r19, 0xBC	; 188
 1e8:	4b e8       	ldi	r20, 0x8B	; 139
 1ea:	5f e3       	ldi	r21, 0x3F	; 63
 1ec:	7e d6       	rcall	.+3324   	; 0xeea <__mulsf3>
 1ee:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <U1dey>
 1f2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <U1dey+0x1>
 1f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <U1dey+0x2>
 1fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <U1dey+0x3>
			}
			if (ADC_second == 1){
 1fe:	c1 30       	cpi	r28, 0x01	; 1
 200:	89 f5       	brne	.+98     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
				U2dey = (sqrt(Sum*1/count_ADC_cycle)*2*2700/22*1.0917);
 202:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <count_ADC_cycle>
 206:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <count_ADC_cycle+0x1>
 20a:	0d 2c       	mov	r0, r13
 20c:	00 0c       	add	r0, r0
 20e:	ee 08       	sbc	r14, r14
 210:	ff 08       	sbc	r15, r15
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	96 d4       	rcall	.+2348   	; 0xb44 <__floatsisf>
 218:	9b 01       	movw	r18, r22
 21a:	ac 01       	movw	r20, r24
 21c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Sum>
 220:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <Sum+0x1>
 224:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sum+0x2>
 228:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Sum+0x3>
 22c:	5c d6       	rcall	.+3256   	; 0xee6 <__divsf3>
 22e:	45 d4       	rcall	.+2186   	; 0xaba <sqrt>
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	44 d6       	rcall	.+3208   	; 0xebe <__addsf3>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 ec       	ldi	r19, 0xC0	; 192
 23a:	48 e2       	ldi	r20, 0x28	; 40
 23c:	55 e4       	ldi	r21, 0x45	; 69
 23e:	55 d6       	rcall	.+3242   	; 0xeea <__mulsf3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 eb       	ldi	r20, 0xB0	; 176
 246:	51 e4       	ldi	r21, 0x41	; 65
 248:	4e d6       	rcall	.+3228   	; 0xee6 <__divsf3>
 24a:	23 ed       	ldi	r18, 0xD3	; 211
 24c:	3c eb       	ldi	r19, 0xBC	; 188
 24e:	4b e8       	ldi	r20, 0x8B	; 139
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	4b d6       	rcall	.+3222   	; 0xeea <__mulsf3>
 254:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <U2dey>
 258:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <U2dey+0x1>
 25c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <U2dey+0x2>
 260:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <U2dey+0x3>
			}
			if (ADC_second == 2){
 264:	c2 30       	cpi	r28, 0x02	; 2
 266:	09 f0       	breq	.+2      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 268:	c5 c0       	rjmp	.+394    	; 0x3f4 <__EEPROM_REGION_LENGTH__+0x1f4>
				U3dey = (sqrt(Sum*1/count_ADC_cycle)*2*2700/22*1.0917);
 26a:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <count_ADC_cycle>
 26e:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <count_ADC_cycle+0x1>
 272:	0d 2c       	mov	r0, r13
 274:	00 0c       	add	r0, r0
 276:	ee 08       	sbc	r14, r14
 278:	ff 08       	sbc	r15, r15
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	62 d4       	rcall	.+2244   	; 0xb44 <__floatsisf>
 280:	9b 01       	movw	r18, r22
 282:	ac 01       	movw	r20, r24
 284:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Sum>
 288:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <Sum+0x1>
 28c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sum+0x2>
 290:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Sum+0x3>
 294:	28 d6       	rcall	.+3152   	; 0xee6 <__divsf3>
 296:	11 d4       	rcall	.+2082   	; 0xaba <sqrt>
 298:	9b 01       	movw	r18, r22
 29a:	ac 01       	movw	r20, r24
 29c:	10 d6       	rcall	.+3104   	; 0xebe <__addsf3>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 ec       	ldi	r19, 0xC0	; 192
 2a2:	48 e2       	ldi	r20, 0x28	; 40
 2a4:	55 e4       	ldi	r21, 0x45	; 69
 2a6:	21 d6       	rcall	.+3138   	; 0xeea <__mulsf3>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 eb       	ldi	r20, 0xB0	; 176
 2ae:	51 e4       	ldi	r21, 0x41	; 65
 2b0:	1a d6       	rcall	.+3124   	; 0xee6 <__divsf3>
 2b2:	23 ed       	ldi	r18, 0xD3	; 211
 2b4:	3c eb       	ldi	r19, 0xBC	; 188
 2b6:	4b e8       	ldi	r20, 0x8B	; 139
 2b8:	5f e3       	ldi	r21, 0x3F	; 63
 2ba:	17 d6       	rcall	.+3118   	; 0xeea <__mulsf3>
 2bc:	6b 01       	movw	r12, r22
 2be:	7c 01       	movw	r14, r24
 2c0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 2c4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 2c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 2cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
				if ((U1dey<50) || (U2dey<50) || (U3dey<50))
 2d0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <U1dey>
 2d4:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <U1dey+0x1>
 2d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <U1dey+0x2>
 2dc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <U1dey+0x3>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	48 e4       	ldi	r20, 0x48	; 72
 2e6:	52 e4       	ldi	r21, 0x42	; 66
 2e8:	f3 d5       	rcall	.+3046   	; 0xed0 <__cmpsf2>
 2ea:	88 23       	and	r24, r24
 2ec:	c4 f0       	brlt	.+48     	; 0x31e <__EEPROM_REGION_LENGTH__+0x11e>
 2ee:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <U2dey>
 2f2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <U2dey+0x1>
 2f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <U2dey+0x2>
 2fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <U2dey+0x3>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	48 e4       	ldi	r20, 0x48	; 72
 304:	52 e4       	ldi	r21, 0x42	; 66
 306:	e4 d5       	rcall	.+3016   	; 0xed0 <__cmpsf2>
 308:	88 23       	and	r24, r24
 30a:	4c f0       	brlt	.+18     	; 0x31e <__EEPROM_REGION_LENGTH__+0x11e>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	48 e4       	ldi	r20, 0x48	; 72
 312:	52 e4       	ldi	r21, 0x42	; 66
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	db d5       	rcall	.+2998   	; 0xed0 <__cmpsf2>
 31a:	88 23       	and	r24, r24
 31c:	2c f4       	brge	.+10     	; 0x328 <__EEPROM_REGION_LENGTH__+0x128>
				{
					pahse_num = 0; 
 31e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pahse_num+0x1>
 322:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pahse_num>
 326:	01 c0       	rjmp	.+2      	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
				}
				else
				{
					phase_alternation();
 328:	48 d4       	rcall	.+2192   	; 0xbba <phase_alternation>
				}
				print_push(U1dey, U2dey, U3dey, pahse_num); 
 32a:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <pahse_num>
 32e:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <pahse_num+0x1>
 332:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 336:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 33a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 33e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 342:	c1 d5       	rcall	.+2946   	; 0xec6 <__fixsfsi>
 344:	2b 01       	movw	r4, r22
 346:	3c 01       	movw	r6, r24
 348:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <U2dey>
 34c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <U2dey+0x1>
 350:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <U2dey+0x2>
 354:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <U2dey+0x3>
 358:	b6 d5       	rcall	.+2924   	; 0xec6 <__fixsfsi>
 35a:	4b 01       	movw	r8, r22
 35c:	5c 01       	movw	r10, r24
 35e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <U1dey>
 362:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <U1dey+0x1>
 366:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <U1dey+0x2>
 36a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <U1dey+0x3>
 36e:	ab d5       	rcall	.+2902   	; 0xec6 <__fixsfsi>
 370:	dc 01       	movw	r26, r24
 372:	cb 01       	movw	r24, r22
 374:	97 01       	movw	r18, r14
 376:	a2 01       	movw	r20, r4
 378:	b4 01       	movw	r22, r8
 37a:	54 d0       	rcall	.+168    	; 0x424 <print_push>
				ADC_second = 0;
 37c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADC_second>
				ADC_pr = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_pr>
				if ((U1dey>110) && (U1dey<238)){
 386:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <U1dey>
 38a:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <U1dey+0x1>
 38e:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <U1dey+0x2>
 392:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <U1dey+0x3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4c ed       	ldi	r20, 0xDC	; 220
 39c:	52 e4       	ldi	r21, 0x42	; 66
 39e:	c7 01       	movw	r24, r14
 3a0:	b6 01       	movw	r22, r12
 3a2:	9a d5       	rcall	.+2868   	; 0xed8 <__gesf2>
 3a4:	18 16       	cp	r1, r24
 3a6:	e4 f4       	brge	.+56     	; 0x3e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	4e e6       	ldi	r20, 0x6E	; 110
 3ae:	53 e4       	ldi	r21, 0x43	; 67
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	8d d5       	rcall	.+2842   	; 0xed0 <__cmpsf2>
 3b6:	88 23       	and	r24, r24
 3b8:	9c f4       	brge	.+38     	; 0x3e0 <__EEPROM_REGION_LENGTH__+0x1e0>
					PORTB |= (1<<1);
 3ba:	85 b1       	in	r24, 0x05	; 5
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	85 b9       	out	0x05, r24	; 5
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	29 e6       	ldi	r18, 0x69	; 105
 3c4:	88 e1       	ldi	r24, 0x18	; 24
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 3d0:	00 00       	nop
					_delay_ms(500);
					PORTB |= (1<<2);
 3d2:	85 b1       	in	r24, 0x05	; 5
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	85 b9       	out	0x05, r24	; 5
					PORTD |= (1<<6);
 3d8:	8b b1       	in	r24, 0x0b	; 11
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	8b b9       	out	0x0b, r24	; 11
 3de:	10 c0       	rjmp	.+32     	; 0x400 <__DATA_REGION_LENGTH__>
				}
				else{
					PORTB &= ~(1<<1);
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	8d 7f       	andi	r24, 0xFD	; 253
 3e4:	85 b9       	out	0x05, r24	; 5
					PORTB &= ~(1<<2);
 3e6:	85 b1       	in	r24, 0x05	; 5
 3e8:	8b 7f       	andi	r24, 0xFB	; 251
 3ea:	85 b9       	out	0x05, r24	; 5
					PORTD &= ~(1<<6);
 3ec:	8b b1       	in	r24, 0x0b	; 11
 3ee:	8f 7b       	andi	r24, 0xBF	; 191
 3f0:	8b b9       	out	0x0b, r24	; 11
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <__DATA_REGION_LENGTH__>
				}
			}
			else{
				ADC_second++;
 3f4:	cf 5f       	subi	r28, 0xFF	; 255
 3f6:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <ADC_second>
				ADC_pr = ADC_second+1;
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
 3fc:	c0 93 19 01 	sts	0x0119, r28	; 0x800119 <ADC_pr>
			}
			count_ADC_cycle = 0;	
 400:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count_ADC_cycle+0x1>
 404:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count_ADC_cycle>
			Sum = 0;		
 408:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Sum>
 40c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Sum+0x1>
 410:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Sum+0x2>
 414:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <Sum+0x3>
			TCNT1 = 0;
 418:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 41c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
			sei();
 420:	78 94       	sei
 422:	8f ce       	rjmp	.-738    	; 0x142 <main+0xa6>

Disassembly of section .text.avrlibc.fplib:

00000ebc <__subsf3>:
 ebc:	50 58       	subi	r21, 0x80	; 128

00000ebe <__addsf3>:
 ebe:	bb 27       	eor	r27, r27
 ec0:	aa 27       	eor	r26, r26
 ec2:	eb dc       	rcall	.-1578   	; 0x89a <__addsf3x>
 ec4:	b0 cf       	rjmp	.-160    	; 0xe26 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000089a <__addsf3x>:
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__addsf3x+0x1c>
 89c:	ed d2       	rcall	.+1498   	; 0xe78 <__fp_pscA>
 89e:	30 f0       	brcs	.+12     	; 0x8ac <__addsf3x+0x12>
 8a0:	f2 d2       	rcall	.+1508   	; 0xe86 <__fp_pscB>
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__addsf3x+0x12>
 8a4:	31 f4       	brne	.+12     	; 0x8b2 <__addsf3x+0x18>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__addsf3x+0x14>
 8aa:	1e f4       	brtc	.+6      	; 0x8b2 <__addsf3x+0x18>
 8ac:	19 c3       	rjmp	.+1586   	; 0xee0 <__fp_nan>
 8ae:	0e f4       	brtc	.+2      	; 0x8b2 <__addsf3x+0x18>
 8b0:	e0 95       	com	r30
 8b2:	e7 fb       	bst	r30, 7
 8b4:	fd c2       	rjmp	.+1530   	; 0xeb0 <__fp_inf>
 8b6:	e9 2f       	mov	r30, r25
 8b8:	28 d2       	rcall	.+1104   	; 0xd0a <__fp_split3>
 8ba:	80 f3       	brcs	.-32     	; 0x89c <__addsf3x+0x2>
 8bc:	ba 17       	cp	r27, r26
 8be:	62 07       	cpc	r22, r18
 8c0:	73 07       	cpc	r23, r19
 8c2:	84 07       	cpc	r24, r20
 8c4:	95 07       	cpc	r25, r21
 8c6:	18 f0       	brcs	.+6      	; 0x8ce <__addsf3x+0x34>
 8c8:	71 f4       	brne	.+28     	; 0x8e6 <__addsf3x+0x4c>
 8ca:	9e f5       	brtc	.+102    	; 0x932 <__addsf3x+0x98>
 8cc:	e3 c2       	rjmp	.+1478   	; 0xe94 <__fp_zero>
 8ce:	0e f4       	brtc	.+2      	; 0x8d2 <__addsf3x+0x38>
 8d0:	e0 95       	com	r30
 8d2:	0b 2e       	mov	r0, r27
 8d4:	ba 2f       	mov	r27, r26
 8d6:	a0 2d       	mov	r26, r0
 8d8:	0b 01       	movw	r0, r22
 8da:	b9 01       	movw	r22, r18
 8dc:	90 01       	movw	r18, r0
 8de:	0c 01       	movw	r0, r24
 8e0:	ca 01       	movw	r24, r20
 8e2:	a0 01       	movw	r20, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	ff 27       	eor	r31, r31
 8e8:	59 1b       	sub	r21, r25
 8ea:	99 f0       	breq	.+38     	; 0x912 <__addsf3x+0x78>
 8ec:	59 3f       	cpi	r21, 0xF9	; 249
 8ee:	50 f4       	brcc	.+20     	; 0x904 <__addsf3x+0x6a>
 8f0:	50 3e       	cpi	r21, 0xE0	; 224
 8f2:	68 f1       	brcs	.+90     	; 0x94e <__addsf3x+0xb4>
 8f4:	1a 16       	cp	r1, r26
 8f6:	f0 40       	sbci	r31, 0x00	; 0
 8f8:	a2 2f       	mov	r26, r18
 8fa:	23 2f       	mov	r18, r19
 8fc:	34 2f       	mov	r19, r20
 8fe:	44 27       	eor	r20, r20
 900:	58 5f       	subi	r21, 0xF8	; 248
 902:	f3 cf       	rjmp	.-26     	; 0x8ea <__addsf3x+0x50>
 904:	46 95       	lsr	r20
 906:	37 95       	ror	r19
 908:	27 95       	ror	r18
 90a:	a7 95       	ror	r26
 90c:	f0 40       	sbci	r31, 0x00	; 0
 90e:	53 95       	inc	r21
 910:	c9 f7       	brne	.-14     	; 0x904 <__addsf3x+0x6a>
 912:	7e f4       	brtc	.+30     	; 0x932 <__addsf3x+0x98>
 914:	1f 16       	cp	r1, r31
 916:	ba 0b       	sbc	r27, r26
 918:	62 0b       	sbc	r22, r18
 91a:	73 0b       	sbc	r23, r19
 91c:	84 0b       	sbc	r24, r20
 91e:	ba f0       	brmi	.+46     	; 0x94e <__addsf3x+0xb4>
 920:	91 50       	subi	r25, 0x01	; 1
 922:	a1 f0       	breq	.+40     	; 0x94c <__addsf3x+0xb2>
 924:	ff 0f       	add	r31, r31
 926:	bb 1f       	adc	r27, r27
 928:	66 1f       	adc	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	c2 f7       	brpl	.-16     	; 0x920 <__addsf3x+0x86>
 930:	0e c0       	rjmp	.+28     	; 0x94e <__addsf3x+0xb4>
 932:	ba 0f       	add	r27, r26
 934:	62 1f       	adc	r22, r18
 936:	73 1f       	adc	r23, r19
 938:	84 1f       	adc	r24, r20
 93a:	48 f4       	brcc	.+18     	; 0x94e <__addsf3x+0xb4>
 93c:	87 95       	ror	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	9e 3f       	cpi	r25, 0xFE	; 254
 948:	08 f0       	brcs	.+2      	; 0x94c <__addsf3x+0xb2>
 94a:	b3 cf       	rjmp	.-154    	; 0x8b2 <__addsf3x+0x18>
 94c:	93 95       	inc	r25
 94e:	88 0f       	add	r24, r24
 950:	08 f0       	brcs	.+2      	; 0x954 <__addsf3x+0xba>
 952:	99 27       	eor	r25, r25
 954:	ee 0f       	add	r30, r30
 956:	97 95       	ror	r25
 958:	87 95       	ror	r24
 95a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ed0 <__cmpsf2>:
 ed0:	f8 de       	rcall	.-528    	; 0xcc2 <__fp_cmp>
 ed2:	08 f4       	brcc	.+2      	; 0xed6 <__cmpsf2+0x6>
 ed4:	81 e0       	ldi	r24, 0x01	; 1
 ed6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ee6 <__divsf3>:
 ee6:	10 dc       	rcall	.-2016   	; 0x708 <__divsf3x>
 ee8:	9e cf       	rjmp	.-196    	; 0xe26 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000708 <__divsf3x>:
 708:	0b c0       	rjmp	.+22     	; 0x720 <__divsf3x+0x18>
 70a:	bd d3       	rcall	.+1914   	; 0xe86 <__fp_pscB>
 70c:	40 f0       	brcs	.+16     	; 0x71e <__divsf3x+0x16>
 70e:	b4 d3       	rcall	.+1896   	; 0xe78 <__fp_pscA>
 710:	30 f0       	brcs	.+12     	; 0x71e <__divsf3x+0x16>
 712:	21 f4       	brne	.+8      	; 0x71c <__divsf3x+0x14>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	19 f0       	breq	.+6      	; 0x71e <__divsf3x+0x16>
 718:	cb c3       	rjmp	.+1942   	; 0xeb0 <__fp_inf>
 71a:	51 11       	cpse	r21, r1
 71c:	bc c3       	rjmp	.+1912   	; 0xe96 <__fp_szero>
 71e:	e0 c3       	rjmp	.+1984   	; 0xee0 <__fp_nan>
 720:	f4 d2       	rcall	.+1512   	; 0xd0a <__fp_split3>
 722:	98 f3       	brcs	.-26     	; 0x70a <__divsf3x+0x2>

00000724 <__divsf3_pse>:
 724:	99 23       	and	r25, r25
 726:	c9 f3       	breq	.-14     	; 0x71a <__divsf3x+0x12>
 728:	55 23       	and	r21, r21
 72a:	b1 f3       	breq	.-20     	; 0x718 <__divsf3x+0x10>
 72c:	95 1b       	sub	r25, r21
 72e:	55 0b       	sbc	r21, r21
 730:	bb 27       	eor	r27, r27
 732:	aa 27       	eor	r26, r26
 734:	62 17       	cp	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	38 f0       	brcs	.+14     	; 0x74a <__divsf3_pse+0x26>
 73c:	9f 5f       	subi	r25, 0xFF	; 255
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	44 1f       	adc	r20, r20
 746:	aa 1f       	adc	r26, r26
 748:	a9 f3       	breq	.-22     	; 0x734 <__divsf3_pse+0x10>
 74a:	33 d0       	rcall	.+102    	; 0x7b2 <__divsf3_pse+0x8e>
 74c:	0e 2e       	mov	r0, r30
 74e:	3a f0       	brmi	.+14     	; 0x75e <__divsf3_pse+0x3a>
 750:	e0 e8       	ldi	r30, 0x80	; 128
 752:	30 d0       	rcall	.+96     	; 0x7b4 <__divsf3_pse+0x90>
 754:	91 50       	subi	r25, 0x01	; 1
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	e6 95       	lsr	r30
 75a:	00 1c       	adc	r0, r0
 75c:	ca f7       	brpl	.-14     	; 0x750 <__divsf3_pse+0x2c>
 75e:	29 d0       	rcall	.+82     	; 0x7b2 <__divsf3_pse+0x8e>
 760:	fe 2f       	mov	r31, r30
 762:	27 d0       	rcall	.+78     	; 0x7b2 <__divsf3_pse+0x8e>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	bb 1f       	adc	r27, r27
 76c:	26 17       	cp	r18, r22
 76e:	37 07       	cpc	r19, r23
 770:	48 07       	cpc	r20, r24
 772:	ab 07       	cpc	r26, r27
 774:	b0 e8       	ldi	r27, 0x80	; 128
 776:	09 f0       	breq	.+2      	; 0x77a <__divsf3_pse+0x56>
 778:	bb 0b       	sbc	r27, r27
 77a:	80 2d       	mov	r24, r0
 77c:	bf 01       	movw	r22, r30
 77e:	ff 27       	eor	r31, r31
 780:	93 58       	subi	r25, 0x83	; 131
 782:	5f 4f       	sbci	r21, 0xFF	; 255
 784:	2a f0       	brmi	.+10     	; 0x790 <__divsf3_pse+0x6c>
 786:	9e 3f       	cpi	r25, 0xFE	; 254
 788:	51 05       	cpc	r21, r1
 78a:	68 f0       	brcs	.+26     	; 0x7a6 <__divsf3_pse+0x82>
 78c:	91 c3       	rjmp	.+1826   	; 0xeb0 <__fp_inf>
 78e:	83 c3       	rjmp	.+1798   	; 0xe96 <__fp_szero>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	ec f3       	brlt	.-6      	; 0x78e <__divsf3_pse+0x6a>
 794:	98 3e       	cpi	r25, 0xE8	; 232
 796:	dc f3       	brlt	.-10     	; 0x78e <__divsf3_pse+0x6a>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f7 95       	ror	r31
 7a2:	9f 5f       	subi	r25, 0xFF	; 255
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__divsf3_pse+0x74>
 7a6:	88 0f       	add	r24, r24
 7a8:	91 1d       	adc	r25, r1
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret
 7b2:	e1 e0       	ldi	r30, 0x01	; 1
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	bb 1f       	adc	r27, r27
 7bc:	62 17       	cp	r22, r18
 7be:	73 07       	cpc	r23, r19
 7c0:	84 07       	cpc	r24, r20
 7c2:	ba 07       	cpc	r27, r26
 7c4:	20 f0       	brcs	.+8      	; 0x7ce <__divsf3_pse+0xaa>
 7c6:	62 1b       	sub	r22, r18
 7c8:	73 0b       	sbc	r23, r19
 7ca:	84 0b       	sbc	r24, r20
 7cc:	ba 0b       	sbc	r27, r26
 7ce:	ee 1f       	adc	r30, r30
 7d0:	88 f7       	brcc	.-30     	; 0x7b4 <__divsf3_pse+0x90>
 7d2:	e0 95       	com	r30
 7d4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ec6 <__fixsfsi>:
 ec6:	ac de       	rcall	.-680    	; 0xc20 <__fixunssfsi>
 ec8:	68 94       	set
 eca:	b1 11       	cpse	r27, r1
 ecc:	e4 cf       	rjmp	.-56     	; 0xe96 <__fp_szero>
 ece:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000c20 <__fixunssfsi>:
 c20:	7c d0       	rcall	.+248    	; 0xd1a <__fp_splitA>
 c22:	88 f0       	brcs	.+34     	; 0xc46 <__fixunssfsi+0x26>
 c24:	9f 57       	subi	r25, 0x7F	; 127
 c26:	90 f0       	brcs	.+36     	; 0xc4c <__fixunssfsi+0x2c>
 c28:	b9 2f       	mov	r27, r25
 c2a:	99 27       	eor	r25, r25
 c2c:	b7 51       	subi	r27, 0x17	; 23
 c2e:	a0 f0       	brcs	.+40     	; 0xc58 <__fixunssfsi+0x38>
 c30:	d1 f0       	breq	.+52     	; 0xc66 <__fixunssfsi+0x46>
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	1a f0       	brmi	.+6      	; 0xc42 <__fixunssfsi+0x22>
 c3c:	ba 95       	dec	r27
 c3e:	c9 f7       	brne	.-14     	; 0xc32 <__fixunssfsi+0x12>
 c40:	12 c0       	rjmp	.+36     	; 0xc66 <__fixunssfsi+0x46>
 c42:	b1 30       	cpi	r27, 0x01	; 1
 c44:	81 f0       	breq	.+32     	; 0xc66 <__fixunssfsi+0x46>
 c46:	26 d1       	rcall	.+588    	; 0xe94 <__fp_zero>
 c48:	b1 e0       	ldi	r27, 0x01	; 1
 c4a:	08 95       	ret
 c4c:	23 c1       	rjmp	.+582    	; 0xe94 <__fp_zero>
 c4e:	67 2f       	mov	r22, r23
 c50:	78 2f       	mov	r23, r24
 c52:	88 27       	eor	r24, r24
 c54:	b8 5f       	subi	r27, 0xF8	; 248
 c56:	39 f0       	breq	.+14     	; 0xc66 <__fixunssfsi+0x46>
 c58:	b9 3f       	cpi	r27, 0xF9	; 249
 c5a:	cc f3       	brlt	.-14     	; 0xc4e <__fixunssfsi+0x2e>
 c5c:	86 95       	lsr	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b3 95       	inc	r27
 c64:	d9 f7       	brne	.-10     	; 0xc5c <__fixunssfsi+0x3c>
 c66:	3e f4       	brtc	.+14     	; 0xc76 <__fixunssfsi+0x56>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000b40 <__floatunsisf>:
 b40:	e8 94       	clt
 b42:	09 c0       	rjmp	.+18     	; 0xb56 <__floatsisf+0x12>

00000b44 <__floatsisf>:
 b44:	97 fb       	bst	r25, 7
 b46:	3e f4       	brtc	.+14     	; 0xb56 <__floatsisf+0x12>
 b48:	90 95       	com	r25
 b4a:	80 95       	com	r24
 b4c:	70 95       	com	r23
 b4e:	61 95       	neg	r22
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	99 23       	and	r25, r25
 b58:	a9 f0       	breq	.+42     	; 0xb84 <__floatsisf+0x40>
 b5a:	f9 2f       	mov	r31, r25
 b5c:	96 e9       	ldi	r25, 0x96	; 150
 b5e:	bb 27       	eor	r27, r27
 b60:	93 95       	inc	r25
 b62:	f6 95       	lsr	r31
 b64:	87 95       	ror	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b7 95       	ror	r27
 b6c:	f1 11       	cpse	r31, r1
 b6e:	f8 cf       	rjmp	.-16     	; 0xb60 <__floatsisf+0x1c>
 b70:	fa f4       	brpl	.+62     	; 0xbb0 <__floatsisf+0x6c>
 b72:	bb 0f       	add	r27, r27
 b74:	11 f4       	brne	.+4      	; 0xb7a <__floatsisf+0x36>
 b76:	60 ff       	sbrs	r22, 0
 b78:	1b c0       	rjmp	.+54     	; 0xbb0 <__floatsisf+0x6c>
 b7a:	6f 5f       	subi	r22, 0xFF	; 255
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	16 c0       	rjmp	.+44     	; 0xbb0 <__floatsisf+0x6c>
 b84:	88 23       	and	r24, r24
 b86:	11 f0       	breq	.+4      	; 0xb8c <__floatsisf+0x48>
 b88:	96 e9       	ldi	r25, 0x96	; 150
 b8a:	11 c0       	rjmp	.+34     	; 0xbae <__floatsisf+0x6a>
 b8c:	77 23       	and	r23, r23
 b8e:	21 f0       	breq	.+8      	; 0xb98 <__floatsisf+0x54>
 b90:	9e e8       	ldi	r25, 0x8E	; 142
 b92:	87 2f       	mov	r24, r23
 b94:	76 2f       	mov	r23, r22
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <__floatsisf+0x5e>
 b98:	66 23       	and	r22, r22
 b9a:	71 f0       	breq	.+28     	; 0xbb8 <__floatsisf+0x74>
 b9c:	96 e8       	ldi	r25, 0x86	; 134
 b9e:	86 2f       	mov	r24, r22
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	60 e0       	ldi	r22, 0x00	; 0
 ba4:	2a f0       	brmi	.+10     	; 0xbb0 <__floatsisf+0x6c>
 ba6:	9a 95       	dec	r25
 ba8:	66 0f       	add	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	da f7       	brpl	.-10     	; 0xba6 <__floatsisf+0x62>
 bb0:	88 0f       	add	r24, r24
 bb2:	96 95       	lsr	r25
 bb4:	87 95       	ror	r24
 bb6:	97 f9       	bld	r25, 7
 bb8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000cc2 <__fp_cmp>:
 cc2:	99 0f       	add	r25, r25
 cc4:	00 08       	sbc	r0, r0
 cc6:	55 0f       	add	r21, r21
 cc8:	aa 0b       	sbc	r26, r26
 cca:	e0 e8       	ldi	r30, 0x80	; 128
 ccc:	fe ef       	ldi	r31, 0xFE	; 254
 cce:	16 16       	cp	r1, r22
 cd0:	17 06       	cpc	r1, r23
 cd2:	e8 07       	cpc	r30, r24
 cd4:	f9 07       	cpc	r31, r25
 cd6:	c0 f0       	brcs	.+48     	; 0xd08 <__fp_cmp+0x46>
 cd8:	12 16       	cp	r1, r18
 cda:	13 06       	cpc	r1, r19
 cdc:	e4 07       	cpc	r30, r20
 cde:	f5 07       	cpc	r31, r21
 ce0:	98 f0       	brcs	.+38     	; 0xd08 <__fp_cmp+0x46>
 ce2:	62 1b       	sub	r22, r18
 ce4:	73 0b       	sbc	r23, r19
 ce6:	84 0b       	sbc	r24, r20
 ce8:	95 0b       	sbc	r25, r21
 cea:	39 f4       	brne	.+14     	; 0xcfa <__fp_cmp+0x38>
 cec:	0a 26       	eor	r0, r26
 cee:	61 f0       	breq	.+24     	; 0xd08 <__fp_cmp+0x46>
 cf0:	23 2b       	or	r18, r19
 cf2:	24 2b       	or	r18, r20
 cf4:	25 2b       	or	r18, r21
 cf6:	21 f4       	brne	.+8      	; 0xd00 <__fp_cmp+0x3e>
 cf8:	08 95       	ret
 cfa:	0a 26       	eor	r0, r26
 cfc:	09 f4       	brne	.+2      	; 0xd00 <__fp_cmp+0x3e>
 cfe:	a1 40       	sbci	r26, 0x01	; 1
 d00:	a6 95       	lsr	r26
 d02:	8f ef       	ldi	r24, 0xFF	; 255
 d04:	81 1d       	adc	r24, r1
 d06:	81 1d       	adc	r24, r1
 d08:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000eb0 <__fp_inf>:
 eb0:	97 f9       	bld	r25, 7
 eb2:	9f 67       	ori	r25, 0x7F	; 127
 eb4:	80 e8       	ldi	r24, 0x80	; 128
 eb6:	70 e0       	ldi	r23, 0x00	; 0
 eb8:	60 e0       	ldi	r22, 0x00	; 0
 eba:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ee0 <__fp_nan>:
 ee0:	9f ef       	ldi	r25, 0xFF	; 255
 ee2:	80 ec       	ldi	r24, 0xC0	; 192
 ee4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e78 <__fp_pscA>:
 e78:	00 24       	eor	r0, r0
 e7a:	0a 94       	dec	r0
 e7c:	16 16       	cp	r1, r22
 e7e:	17 06       	cpc	r1, r23
 e80:	18 06       	cpc	r1, r24
 e82:	09 06       	cpc	r0, r25
 e84:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e86 <__fp_pscB>:
 e86:	00 24       	eor	r0, r0
 e88:	0a 94       	dec	r0
 e8a:	12 16       	cp	r1, r18
 e8c:	13 06       	cpc	r1, r19
 e8e:	14 06       	cpc	r1, r20
 e90:	05 06       	cpc	r0, r21
 e92:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e26 <__fp_round>:
 e26:	09 2e       	mov	r0, r25
 e28:	03 94       	inc	r0
 e2a:	00 0c       	add	r0, r0
 e2c:	11 f4       	brne	.+4      	; 0xe32 <__fp_round+0xc>
 e2e:	88 23       	and	r24, r24
 e30:	52 f0       	brmi	.+20     	; 0xe46 <__fp_round+0x20>
 e32:	bb 0f       	add	r27, r27
 e34:	40 f4       	brcc	.+16     	; 0xe46 <__fp_round+0x20>
 e36:	bf 2b       	or	r27, r31
 e38:	11 f4       	brne	.+4      	; 0xe3e <__fp_round+0x18>
 e3a:	60 ff       	sbrs	r22, 0
 e3c:	04 c0       	rjmp	.+8      	; 0xe46 <__fp_round+0x20>
 e3e:	6f 5f       	subi	r22, 0xFF	; 255
 e40:	7f 4f       	sbci	r23, 0xFF	; 255
 e42:	8f 4f       	sbci	r24, 0xFF	; 255
 e44:	9f 4f       	sbci	r25, 0xFF	; 255
 e46:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000d0a <__fp_split3>:
 d0a:	57 fd       	sbrc	r21, 7
 d0c:	90 58       	subi	r25, 0x80	; 128
 d0e:	44 0f       	add	r20, r20
 d10:	55 1f       	adc	r21, r21
 d12:	59 f0       	breq	.+22     	; 0xd2a <__fp_splitA+0x10>
 d14:	5f 3f       	cpi	r21, 0xFF	; 255
 d16:	71 f0       	breq	.+28     	; 0xd34 <__fp_splitA+0x1a>
 d18:	47 95       	ror	r20

00000d1a <__fp_splitA>:
 d1a:	88 0f       	add	r24, r24
 d1c:	97 fb       	bst	r25, 7
 d1e:	99 1f       	adc	r25, r25
 d20:	61 f0       	breq	.+24     	; 0xd3a <__fp_splitA+0x20>
 d22:	9f 3f       	cpi	r25, 0xFF	; 255
 d24:	79 f0       	breq	.+30     	; 0xd44 <__fp_splitA+0x2a>
 d26:	87 95       	ror	r24
 d28:	08 95       	ret
 d2a:	12 16       	cp	r1, r18
 d2c:	13 06       	cpc	r1, r19
 d2e:	14 06       	cpc	r1, r20
 d30:	55 1f       	adc	r21, r21
 d32:	f2 cf       	rjmp	.-28     	; 0xd18 <__fp_split3+0xe>
 d34:	46 95       	lsr	r20
 d36:	f1 df       	rcall	.-30     	; 0xd1a <__fp_splitA>
 d38:	08 c0       	rjmp	.+16     	; 0xd4a <__fp_splitA+0x30>
 d3a:	16 16       	cp	r1, r22
 d3c:	17 06       	cpc	r1, r23
 d3e:	18 06       	cpc	r1, r24
 d40:	99 1f       	adc	r25, r25
 d42:	f1 cf       	rjmp	.-30     	; 0xd26 <__fp_splitA+0xc>
 d44:	86 95       	lsr	r24
 d46:	71 05       	cpc	r23, r1
 d48:	61 05       	cpc	r22, r1
 d4a:	08 94       	sec
 d4c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e94 <__fp_zero>:
 e94:	e8 94       	clt

00000e96 <__fp_szero>:
 e96:	bb 27       	eor	r27, r27
 e98:	66 27       	eor	r22, r22
 e9a:	77 27       	eor	r23, r23
 e9c:	cb 01       	movw	r24, r22
 e9e:	97 f9       	bld	r25, 7
 ea0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ed8 <__gesf2>:
 ed8:	f4 de       	rcall	.-536    	; 0xcc2 <__fp_cmp>
 eda:	08 f4       	brcc	.+2      	; 0xede <__gesf2+0x6>
 edc:	8f ef       	ldi	r24, 0xFF	; 255
 ede:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000eea <__mulsf3>:
 eea:	75 dc       	rcall	.-1814   	; 0x7d6 <__mulsf3x>
 eec:	9c cf       	rjmp	.-200    	; 0xe26 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000007d6 <__mulsf3x>:
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <__mulsf3x+0x16>
 7d8:	4f d3       	rcall	.+1694   	; 0xe78 <__fp_pscA>
 7da:	28 f0       	brcs	.+10     	; 0x7e6 <__mulsf3x+0x10>
 7dc:	54 d3       	rcall	.+1704   	; 0xe86 <__fp_pscB>
 7de:	18 f0       	brcs	.+6      	; 0x7e6 <__mulsf3x+0x10>
 7e0:	95 23       	and	r25, r21
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__mulsf3x+0x10>
 7e4:	65 c3       	rjmp	.+1738   	; 0xeb0 <__fp_inf>
 7e6:	7c c3       	rjmp	.+1784   	; 0xee0 <__fp_nan>
 7e8:	11 24       	eor	r1, r1
 7ea:	55 c3       	rjmp	.+1706   	; 0xe96 <__fp_szero>
 7ec:	8e d2       	rcall	.+1308   	; 0xd0a <__fp_split3>
 7ee:	a0 f3       	brcs	.-24     	; 0x7d8 <__mulsf3x+0x2>

000007f0 <__mulsf3_pse>:
 7f0:	95 9f       	mul	r25, r21
 7f2:	d1 f3       	breq	.-12     	; 0x7e8 <__mulsf3x+0x12>
 7f4:	95 0f       	add	r25, r21
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	55 1f       	adc	r21, r21
 7fa:	62 9f       	mul	r22, r18
 7fc:	f0 01       	movw	r30, r0
 7fe:	72 9f       	mul	r23, r18
 800:	bb 27       	eor	r27, r27
 802:	f0 0d       	add	r31, r0
 804:	b1 1d       	adc	r27, r1
 806:	63 9f       	mul	r22, r19
 808:	aa 27       	eor	r26, r26
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	aa 1f       	adc	r26, r26
 810:	64 9f       	mul	r22, r20
 812:	66 27       	eor	r22, r22
 814:	b0 0d       	add	r27, r0
 816:	a1 1d       	adc	r26, r1
 818:	66 1f       	adc	r22, r22
 81a:	82 9f       	mul	r24, r18
 81c:	22 27       	eor	r18, r18
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	62 1f       	adc	r22, r18
 824:	73 9f       	mul	r23, r19
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	83 9f       	mul	r24, r19
 82e:	a0 0d       	add	r26, r0
 830:	61 1d       	adc	r22, r1
 832:	22 1f       	adc	r18, r18
 834:	74 9f       	mul	r23, r20
 836:	33 27       	eor	r19, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	23 1f       	adc	r18, r19
 83e:	84 9f       	mul	r24, r20
 840:	60 0d       	add	r22, r0
 842:	21 1d       	adc	r18, r1
 844:	82 2f       	mov	r24, r18
 846:	76 2f       	mov	r23, r22
 848:	6a 2f       	mov	r22, r26
 84a:	11 24       	eor	r1, r1
 84c:	9f 57       	subi	r25, 0x7F	; 127
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	8a f0       	brmi	.+34     	; 0x874 <__mulsf3_pse+0x84>
 852:	e1 f0       	breq	.+56     	; 0x88c <__mulsf3_pse+0x9c>
 854:	88 23       	and	r24, r24
 856:	4a f0       	brmi	.+18     	; 0x86a <__mulsf3_pse+0x7a>
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	bb 1f       	adc	r27, r27
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	91 50       	subi	r25, 0x01	; 1
 866:	50 40       	sbci	r21, 0x00	; 0
 868:	a9 f7       	brne	.-22     	; 0x854 <__mulsf3_pse+0x64>
 86a:	9e 3f       	cpi	r25, 0xFE	; 254
 86c:	51 05       	cpc	r21, r1
 86e:	70 f0       	brcs	.+28     	; 0x88c <__mulsf3_pse+0x9c>
 870:	1f c3       	rjmp	.+1598   	; 0xeb0 <__fp_inf>
 872:	11 c3       	rjmp	.+1570   	; 0xe96 <__fp_szero>
 874:	5f 3f       	cpi	r21, 0xFF	; 255
 876:	ec f3       	brlt	.-6      	; 0x872 <__mulsf3_pse+0x82>
 878:	98 3e       	cpi	r25, 0xE8	; 232
 87a:	dc f3       	brlt	.-10     	; 0x872 <__mulsf3_pse+0x82>
 87c:	86 95       	lsr	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b7 95       	ror	r27
 884:	f7 95       	ror	r31
 886:	e7 95       	ror	r30
 888:	9f 5f       	subi	r25, 0xFF	; 255
 88a:	c1 f7       	brne	.-16     	; 0x87c <__mulsf3_pse+0x8c>
 88c:	fe 2b       	or	r31, r30
 88e:	88 0f       	add	r24, r24
 890:	91 1d       	adc	r25, r1
 892:	96 95       	lsr	r25
 894:	87 95       	ror	r24
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000aba <sqrt>:
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <sqrt+0xa>
 abc:	11 f4       	brne	.+4      	; 0xac2 <sqrt+0x8>
 abe:	0e f4       	brtc	.+2      	; 0xac2 <sqrt+0x8>
 ac0:	0f c2       	rjmp	.+1054   	; 0xee0 <__fp_nan>
 ac2:	c2 c1       	rjmp	.+900    	; 0xe48 <__fp_mpack>
 ac4:	2a d1       	rcall	.+596    	; 0xd1a <__fp_splitA>
 ac6:	d0 f3       	brcs	.-12     	; 0xabc <sqrt+0x2>
 ac8:	99 23       	and	r25, r25
 aca:	d9 f3       	breq	.-10     	; 0xac2 <sqrt+0x8>
 acc:	ce f3       	brts	.-14     	; 0xac0 <sqrt+0x6>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	55 0b       	sbc	r21, r21
 ad2:	87 ff       	sbrs	r24, 7
 ad4:	e6 d1       	rcall	.+972    	; 0xea2 <__fp_norm2>
 ad6:	00 24       	eor	r0, r0
 ad8:	a0 e6       	ldi	r26, 0x60	; 96
 ada:	40 ea       	ldi	r20, 0xA0	; 160
 adc:	90 01       	movw	r18, r0
 ade:	80 58       	subi	r24, 0x80	; 128
 ae0:	56 95       	lsr	r21
 ae2:	97 95       	ror	r25
 ae4:	28 f4       	brcc	.+10     	; 0xaf0 <sqrt+0x36>
 ae6:	80 5c       	subi	r24, 0xC0	; 192
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <sqrt+0x3e>
 af0:	26 17       	cp	r18, r22
 af2:	37 07       	cpc	r19, r23
 af4:	48 07       	cpc	r20, r24
 af6:	30 f4       	brcc	.+12     	; 0xb04 <sqrt+0x4a>
 af8:	62 1b       	sub	r22, r18
 afa:	73 0b       	sbc	r23, r19
 afc:	84 0b       	sbc	r24, r20
 afe:	20 29       	or	r18, r0
 b00:	31 29       	or	r19, r1
 b02:	4a 2b       	or	r20, r26
 b04:	a6 95       	lsr	r26
 b06:	17 94       	ror	r1
 b08:	07 94       	ror	r0
 b0a:	20 25       	eor	r18, r0
 b0c:	31 25       	eor	r19, r1
 b0e:	4a 27       	eor	r20, r26
 b10:	58 f7       	brcc	.-42     	; 0xae8 <sqrt+0x2e>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	20 f0       	brcs	.+8      	; 0xb22 <sqrt+0x68>
 b1a:	26 17       	cp	r18, r22
 b1c:	37 07       	cpc	r19, r23
 b1e:	48 07       	cpc	r20, r24
 b20:	30 f4       	brcc	.+12     	; 0xb2e <sqrt+0x74>
 b22:	62 0b       	sbc	r22, r18
 b24:	73 0b       	sbc	r23, r19
 b26:	84 0b       	sbc	r24, r20
 b28:	20 0d       	add	r18, r0
 b2a:	31 1d       	adc	r19, r1
 b2c:	41 1d       	adc	r20, r1
 b2e:	a0 95       	com	r26
 b30:	81 f7       	brne	.-32     	; 0xb12 <sqrt+0x58>
 b32:	b9 01       	movw	r22, r18
 b34:	84 2f       	mov	r24, r20
 b36:	91 58       	subi	r25, 0x81	; 129
 b38:	88 0f       	add	r24, r24
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e48 <__fp_mpack>:
 e48:	9f 3f       	cpi	r25, 0xFF	; 255
 e4a:	31 f0       	breq	.+12     	; 0xe58 <__fp_mpack_finite+0xc>

00000e4c <__fp_mpack_finite>:
 e4c:	91 50       	subi	r25, 0x01	; 1
 e4e:	20 f4       	brcc	.+8      	; 0xe58 <__fp_mpack_finite+0xc>
 e50:	87 95       	ror	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	b7 95       	ror	r27
 e58:	88 0f       	add	r24, r24
 e5a:	91 1d       	adc	r25, r1
 e5c:	96 95       	lsr	r25
 e5e:	87 95       	ror	r24
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000ea2 <__fp_norm2>:
 ea2:	91 50       	subi	r25, 0x01	; 1
 ea4:	50 40       	sbci	r21, 0x00	; 0
 ea6:	66 0f       	add	r22, r22
 ea8:	77 1f       	adc	r23, r23
 eaa:	88 1f       	adc	r24, r24
 eac:	d2 f7       	brpl	.-12     	; 0xea2 <__fp_norm2>
 eae:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000e00 <__divmodhi4>:
 e00:	97 fb       	bst	r25, 7
 e02:	07 2e       	mov	r0, r23
 e04:	16 f4       	brtc	.+4      	; 0xe0a <__divmodhi4+0xa>
 e06:	00 94       	com	r0
 e08:	06 d0       	rcall	.+12     	; 0xe16 <__divmodhi4_neg1>
 e0a:	77 fd       	sbrc	r23, 7
 e0c:	08 d0       	rcall	.+16     	; 0xe1e <__divmodhi4_neg2>
 e0e:	d1 df       	rcall	.-94     	; 0xdb2 <__udivmodhi4>
 e10:	07 fc       	sbrc	r0, 7
 e12:	05 d0       	rcall	.+10     	; 0xe1e <__divmodhi4_neg2>
 e14:	3e f4       	brtc	.+14     	; 0xe24 <__divmodhi4_exit>

00000e16 <__divmodhi4_neg1>:
 e16:	90 95       	com	r25
 e18:	81 95       	neg	r24
 e1a:	9f 4f       	sbci	r25, 0xFF	; 255
 e1c:	08 95       	ret

00000e1e <__divmodhi4_neg2>:
 e1e:	70 95       	com	r23
 e20:	61 95       	neg	r22
 e22:	7f 4f       	sbci	r23, 0xFF	; 255

00000e24 <__divmodhi4_exit>:
 e24:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000db2 <__udivmodhi4>:
 db2:	aa 1b       	sub	r26, r26
 db4:	bb 1b       	sub	r27, r27
 db6:	51 e1       	ldi	r21, 0x11	; 17
 db8:	07 c0       	rjmp	.+14     	; 0xdc8 <__udivmodhi4_ep>

00000dba <__udivmodhi4_loop>:
 dba:	aa 1f       	adc	r26, r26
 dbc:	bb 1f       	adc	r27, r27
 dbe:	a6 17       	cp	r26, r22
 dc0:	b7 07       	cpc	r27, r23
 dc2:	10 f0       	brcs	.+4      	; 0xdc8 <__udivmodhi4_ep>
 dc4:	a6 1b       	sub	r26, r22
 dc6:	b7 0b       	sbc	r27, r23

00000dc8 <__udivmodhi4_ep>:
 dc8:	88 1f       	adc	r24, r24
 dca:	99 1f       	adc	r25, r25
 dcc:	5a 95       	dec	r21
 dce:	a9 f7       	brne	.-22     	; 0xdba <__udivmodhi4_loop>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	bc 01       	movw	r22, r24
 dd6:	cd 01       	movw	r24, r26
 dd8:	08 95       	ret
